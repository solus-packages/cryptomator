From 06fec0d710b89bf3387809061be12922b1796563 Mon Sep 17 00:00:00 2001
From: Sebastian Stenzel <sebastian.stenzel@gmail.com>
Date: Tue, 29 Mar 2022 20:39:46 +0200
Subject: [PATCH 02/10] =?UTF-8?q?refactored=20launcher,=20deleted=20UiLaun?=
 =?UTF-8?q?cherModule=20component=20graph=20is=20now:=20Main=20=E2=86=92?=
 =?UTF-8?q?=20FxApplicationComponent=20=E2=86=92=20Tray,=20MainWindow,=20e?=
 =?UTF-8?q?tc?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

---
 pom.xml                                       |  10 +-
 src/main/java/module-info.java                |   5 +-
 .../common/vaults/DefaultMountFlags.java      |   2 +-
 .../cryptomator/launcher/AppLaunchEvent.java  |  13 ++
 .../org/cryptomator/launcher/Cryptomator.java |  43 ++--
 .../launcher/CryptomatorComponent.java        |   6 +-
 .../launcher/CryptomatorModule.java           |  45 +++-
 .../launcher/FileOpenRequestHandler.java      |   3 -
 .../launcher/IpcMessageHandler.java           |   1 -
 .../ui/addvaultwizard/AddVaultModule.java     |   6 +-
 .../AddVaultSuccessController.java            |  11 +-
 .../ChooseExistingVaultController.java        |   9 +-
 .../CreateNewVaultPasswordController.java     |  14 +-
 .../ChangePasswordController.java             |  13 +-
 .../cryptomator/ui/common/ErrorComponent.java |  27 +--
 .../cryptomator/ui/common/VaultService.java   |   5 +-
 .../AppLaunchEventHandler.java                |  31 +--
 .../cryptomator/ui/fxapp/AutoUnlocker.java    |  26 +++
 .../ui/fxapp/ExitingQuitResponse.java         |  20 ++
 .../cryptomator/ui/fxapp/FxApplication.java   | 218 ++++--------------
 .../ui/fxapp/FxApplicationComponent.java      |   3 +-
 .../ui/fxapp/FxApplicationModule.java         |  12 +-
 .../ui/fxapp/FxApplicationStyle.java          |  98 ++++++++
 .../ui/fxapp/FxApplicationTerminator.java     | 123 ++++++++++
 .../ui/fxapp/FxApplicationWindows.java        | 146 ++++++++++++
 .../cryptomator/ui/fxapp/PrimaryStage.java    |  14 ++
 .../ui/health/CheckListController.java        |  13 +-
 .../ui/health/StartController.java            |  12 +-
 .../ui/launcher/AppLaunchEvent.java           |  28 ---
 .../ui/launcher/AppLifecycleListener.java     | 146 ------------
 .../ui/launcher/FxApplicationStarter.java     |  75 ------
 .../cryptomator/ui/launcher/UiLauncher.java   |  90 --------
 .../ui/launcher/UiLauncherModule.java         |  61 -----
 .../cryptomator/ui/lock/LockComponent.java    |  16 +-
 .../org/cryptomator/ui/lock/LockModule.java   |   7 +-
 .../org/cryptomator/ui/lock/LockWorkflow.java |  10 +-
 .../cryptomator/ui/mainwindow/MainWindow.java |   2 +-
 .../ui/mainwindow/MainWindowModule.java       |   6 +
 .../mainwindow/MainWindowTitleController.java |  21 +-
 .../VaultDetailLockedController.java          |   9 +-
 .../VaultDetailUnknownErrorController.java    |  12 +-
 .../VaultDetailUnlockedController.java        |  11 +-
 .../VaultListContextMenuController.java       |  20 +-
 .../ui/migration/MigrationModule.java         |   6 +-
 .../ui/migration/MigrationRunController.java  |  12 +-
 .../migration/MigrationSuccessController.java |  13 +-
 .../GeneralPreferencesController.java         |  11 +-
 .../RecoveryKeyCreationController.java        |  10 +-
 .../RecoveryKeyResetPasswordController.java   |  10 +-
 .../ui/removevault/RemoveVaultModule.java     |   8 +-
 .../ui/traymenu/TrayMenuController.java       |  37 ++-
 .../ui/unlock/UnlockComponent.java            |  15 +-
 .../cryptomator/ui/unlock/UnlockModule.java   |   7 +-
 .../cryptomator/ui/unlock/UnlockWorkflow.java |  10 +-
 .../ui/vaultoptions/VaultOptionsModule.java   |   6 +-
 .../wrongfilealert/WrongFileAlertModule.java  |   8 +-
 .../launcher/FileOpenRequestHandlerTest.java  |   3 +-
 57 files changed, 767 insertions(+), 832 deletions(-)
 create mode 100644 src/main/java/org/cryptomator/launcher/AppLaunchEvent.java
 rename src/main/java/org/cryptomator/ui/{launcher => fxapp}/AppLaunchEventHandler.java (72%)
 create mode 100644 src/main/java/org/cryptomator/ui/fxapp/AutoUnlocker.java
 create mode 100644 src/main/java/org/cryptomator/ui/fxapp/ExitingQuitResponse.java
 create mode 100644 src/main/java/org/cryptomator/ui/fxapp/FxApplicationStyle.java
 create mode 100644 src/main/java/org/cryptomator/ui/fxapp/FxApplicationTerminator.java
 create mode 100644 src/main/java/org/cryptomator/ui/fxapp/FxApplicationWindows.java
 create mode 100644 src/main/java/org/cryptomator/ui/fxapp/PrimaryStage.java
 delete mode 100644 src/main/java/org/cryptomator/ui/launcher/AppLaunchEvent.java
 delete mode 100644 src/main/java/org/cryptomator/ui/launcher/AppLifecycleListener.java
 delete mode 100644 src/main/java/org/cryptomator/ui/launcher/FxApplicationStarter.java
 delete mode 100644 src/main/java/org/cryptomator/ui/launcher/UiLauncher.java
 delete mode 100644 src/main/java/org/cryptomator/ui/launcher/UiLauncherModule.java

diff --git a/pom.xml b/pom.xml
index f2faee1d..d26f03dc 100644
--- a/pom.xml
+++ b/pom.xml
@@ -54,7 +54,8 @@
 		<hamcrest.version>2.2</hamcrest.version>
 
 		<!-- build plugin dependencies -->
-		<dependency-check.version>7.0.2</dependency-check.version>
+		<jetbrains.annotations.version>23.0.0</jetbrains.annotations.version>
+		<dependency-check.version>7.0.0</dependency-check.version>
 		<jacoco.version>0.8.7</jacoco.version>
 	</properties>
 
@@ -224,6 +225,13 @@
 			<version>1.2</version>
 			<scope>test</scope>
 		</dependency>
+
+		<dependency>
+			<groupId>org.jetbrains</groupId>
+			<artifactId>annotations</artifactId>
+			<version>${jetbrains.annotations.version}</version>
+			<scope>provided</scope>
+		</dependency>
 	</dependencies>
 
 	<build>
diff --git a/src/main/java/module-info.java b/src/main/java/module-info.java
index 7441a629..90125d7c 100644
--- a/src/main/java/module-info.java
+++ b/src/main/java/module-info.java
@@ -4,6 +4,8 @@ import org.cryptomator.integrations.tray.TrayIntegrationProvider;
 import org.cryptomator.integrations.uiappearance.UiAppearanceProvider;
 
 module org.cryptomator.desktop {
+	requires static org.jetbrains.annotations;
+
 	requires org.cryptomator.cryptofs;
 	requires org.cryptomator.frontend.dokany;
 	requires org.cryptomator.frontend.fuse;
@@ -36,6 +38,8 @@ module org.cryptomator.desktop {
 
 	opens org.cryptomator.common.settings to com.google.gson;
 
+	opens org.cryptomator.launcher to javafx.graphics;
+
 	opens org.cryptomator.common to javafx.fxml;
 	opens org.cryptomator.common.vaults to javafx.fxml;
 	opens org.cryptomator.ui.addvaultwizard to javafx.fxml;
@@ -47,7 +51,6 @@ module org.cryptomator.desktop {
 	opens org.cryptomator.ui.health to javafx.fxml;
 	opens org.cryptomator.ui.keyloading.masterkeyfile to javafx.fxml;
 	opens org.cryptomator.ui.lock to javafx.fxml;
-	opens org.cryptomator.ui.launcher to javafx.graphics;
 	opens org.cryptomator.ui.mainwindow to javafx.fxml;
 	opens org.cryptomator.ui.migration to javafx.fxml;
 	opens org.cryptomator.ui.preferences to javafx.fxml;
diff --git a/src/main/java/org/cryptomator/common/vaults/DefaultMountFlags.java b/src/main/java/org/cryptomator/common/vaults/DefaultMountFlags.java
index 68b61688..4f3a8ff1 100644
--- a/src/main/java/org/cryptomator/common/vaults/DefaultMountFlags.java
+++ b/src/main/java/org/cryptomator/common/vaults/DefaultMountFlags.java
@@ -9,6 +9,6 @@ import static java.lang.annotation.RetentionPolicy.RUNTIME;
 @Qualifier
 @Documented
 @Retention(RUNTIME)
-public @interface DefaultMountFlags {
+@interface DefaultMountFlags {
 
 }
diff --git a/src/main/java/org/cryptomator/launcher/AppLaunchEvent.java b/src/main/java/org/cryptomator/launcher/AppLaunchEvent.java
new file mode 100644
index 00000000..7fde984e
--- /dev/null
+++ b/src/main/java/org/cryptomator/launcher/AppLaunchEvent.java
@@ -0,0 +1,13 @@
+package org.cryptomator.launcher;
+
+import java.nio.file.Path;
+import java.util.Collection;
+
+public record AppLaunchEvent(AppLaunchEvent.EventType type, Collection<Path> pathsToOpen) {
+
+	public enum EventType {
+		REVEAL_APP,
+		OPEN_FILE
+	}
+
+}
diff --git a/src/main/java/org/cryptomator/launcher/Cryptomator.java b/src/main/java/org/cryptomator/launcher/Cryptomator.java
index 6c4751bd..1a9d0b79 100644
--- a/src/main/java/org/cryptomator/launcher/Cryptomator.java
+++ b/src/main/java/org/cryptomator/launcher/Cryptomator.java
@@ -13,17 +13,15 @@ import org.cryptomator.common.ShutdownHook;
 import org.cryptomator.ipc.IpcCommunicator;
 import org.cryptomator.logging.DebugMode;
 import org.cryptomator.logging.LoggerConfiguration;
-import org.cryptomator.ui.launcher.UiLauncher;
+import org.cryptomator.ui.fxapp.FxApplicationComponent;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 import javax.inject.Inject;
-import javax.inject.Named;
 import javax.inject.Singleton;
-import java.io.IOException;
+import javafx.application.Application;
+import javafx.stage.Stage;
 import java.util.List;
-import java.util.Optional;
-import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.Executors;
 
 @Singleton
@@ -38,19 +36,15 @@ public class Cryptomator {
 	private final DebugMode debugMode;
 	private final Environment env;
 	private final Lazy<IpcMessageHandler> ipcMessageHandler;
-	private final CountDownLatch shutdownLatch;
 	private final ShutdownHook shutdownHook;
-	private final Lazy<UiLauncher> uiLauncher;
 
 	@Inject
-	Cryptomator(LoggerConfiguration logConfig, DebugMode debugMode, Environment env, Lazy<IpcMessageHandler> ipcMessageHandler, @Named("shutdownLatch") CountDownLatch shutdownLatch, ShutdownHook shutdownHook, Lazy<UiLauncher> uiLauncher) {
+	Cryptomator(LoggerConfiguration logConfig, DebugMode debugMode, Environment env, Lazy<IpcMessageHandler> ipcMessageHandler, ShutdownHook shutdownHook) {
 		this.logConfig = logConfig;
 		this.debugMode = debugMode;
 		this.env = env;
 		this.ipcMessageHandler = ipcMessageHandler;
-		this.shutdownLatch = shutdownLatch;
 		this.shutdownHook = shutdownHook;
-		this.uiLauncher = uiLauncher;
 	}
 
 	public static void main(String[] args) {
@@ -96,21 +90,38 @@ public class Cryptomator {
 	}
 
 	/**
-	 * Launches the JavaFX application and waits until shutdown is requested.
+	 * Launches the JavaFX application, blocking the main thread until shuts down.
 	 *
 	 * @return Nonzero exit code in case of an error.
-	 * @implNote This method blocks until {@link #shutdownLatch} reached zero.
 	 */
 	private int runGuiApplication() {
 		try {
-			uiLauncher.get().launch();
-			shutdownLatch.await();
+			Application.launch(MainApp.class);
 			LOG.info("UI shut down");
 			return 0;
-		} catch (InterruptedException e) {
-			Thread.currentThread().interrupt();
+		} catch (Throwable e) {
+			LOG.error("Terminating due to error", e);
 			return 1;
 		}
 	}
 
+	public static class MainApp extends Application {
+
+		@Override
+		public void start(Stage primaryStage) {
+			LOG.info("JavaFX application started.");
+			FxApplicationComponent component = CRYPTOMATOR_COMPONENT.fxAppComponentBuilder() //
+					.fxApplication(this) //
+					.primaryStage(primaryStage) //
+					.build();
+			component.application().start();
+		}
+
+		@Override
+		public void stop() {
+			LOG.info("JavaFX application stopped.");
+		}
+
+	}
+
 }
diff --git a/src/main/java/org/cryptomator/launcher/CryptomatorComponent.java b/src/main/java/org/cryptomator/launcher/CryptomatorComponent.java
index 70bf9e77..b43c0eca 100644
--- a/src/main/java/org/cryptomator/launcher/CryptomatorComponent.java
+++ b/src/main/java/org/cryptomator/launcher/CryptomatorComponent.java
@@ -3,14 +3,16 @@ package org.cryptomator.launcher;
 import dagger.Component;
 import org.cryptomator.common.CommonsModule;
 import org.cryptomator.logging.LoggerModule;
-import org.cryptomator.ui.launcher.UiLauncherModule;
+import org.cryptomator.ui.fxapp.FxApplicationComponent;
 
 import javax.inject.Singleton;
 
 @Singleton
-@Component(modules = {CryptomatorModule.class, CommonsModule.class, LoggerModule.class, UiLauncherModule.class})
+@Component(modules = {CryptomatorModule.class, CommonsModule.class, LoggerModule.class})
 public interface CryptomatorComponent {
 
 	Cryptomator application();
 
+	FxApplicationComponent.Builder fxAppComponentBuilder();
+
 }
diff --git a/src/main/java/org/cryptomator/launcher/CryptomatorModule.java b/src/main/java/org/cryptomator/launcher/CryptomatorModule.java
index 90697149..414ba208 100644
--- a/src/main/java/org/cryptomator/launcher/CryptomatorModule.java
+++ b/src/main/java/org/cryptomator/launcher/CryptomatorModule.java
@@ -2,20 +2,57 @@ package org.cryptomator.launcher;
 
 import dagger.Module;
 import dagger.Provides;
+import org.cryptomator.common.PluginClassLoader;
+import org.cryptomator.integrations.autostart.AutoStartProvider;
+import org.cryptomator.integrations.tray.TrayIntegrationProvider;
+import org.cryptomator.integrations.uiappearance.UiAppearanceProvider;
+import org.cryptomator.ui.fxapp.FxApplicationComponent;
+import org.cryptomator.ui.traymenu.TrayMenuComponent;
 
 import javax.inject.Named;
 import javax.inject.Singleton;
 import java.util.Optional;
+import java.util.ResourceBundle;
+import java.util.ServiceLoader;
+import java.util.concurrent.ArrayBlockingQueue;
+import java.util.concurrent.BlockingQueue;
 import java.util.concurrent.CountDownLatch;
 
-@Module
+@Module(subcomponents = {FxApplicationComponent.class})
 class CryptomatorModule {
 
 	@Provides
 	@Singleton
-	@Named("shutdownLatch")
-	static CountDownLatch provideShutdownLatch() {
-		return new CountDownLatch(1);
+	static ResourceBundle provideLocalization() {
+		return ResourceBundle.getBundle("i18n.strings");
 	}
 
+	@Provides
+	@Singleton
+	@Named("launchEventQueue")
+	static BlockingQueue<AppLaunchEvent> provideFileOpenRequests() {
+		return new ArrayBlockingQueue<>(10);
+	}
+
+	// TODO: still needed after integrations-api 1.1.0?
+
+	@Provides
+	@Singleton
+	static Optional<UiAppearanceProvider> provideAppearanceProvider(PluginClassLoader classLoader) {
+		return ServiceLoader.load(UiAppearanceProvider.class, classLoader).findFirst();
+	}
+
+	@Provides
+	@Singleton
+	static Optional<AutoStartProvider> provideAutostartProvider(PluginClassLoader classLoader) {
+		return ServiceLoader.load(AutoStartProvider.class, classLoader).findFirst();
+	}
+
+	@Provides
+	@Singleton
+	static Optional<TrayIntegrationProvider> provideTrayIntegrationProvider(PluginClassLoader classLoader) {
+		return ServiceLoader.load(TrayIntegrationProvider.class, classLoader).findFirst();
+	}
+
+
 }
diff --git a/src/main/java/org/cryptomator/launcher/FileOpenRequestHandler.java b/src/main/java/org/cryptomator/launcher/FileOpenRequestHandler.java
index b4e37e1f..eb2418c6 100644
--- a/src/main/java/org/cryptomator/launcher/FileOpenRequestHandler.java
+++ b/src/main/java/org/cryptomator/launcher/FileOpenRequestHandler.java
@@ -6,7 +6,6 @@
  *******************************************************************************/
 package org.cryptomator.launcher;
 
-import org.cryptomator.ui.launcher.AppLaunchEvent;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -20,12 +19,10 @@ import java.nio.file.FileSystem;
 import java.nio.file.FileSystems;
 import java.nio.file.InvalidPathException;
 import java.nio.file.Path;
-import java.util.Arrays;
 import java.util.Collection;
 import java.util.List;
 import java.util.Objects;
 import java.util.concurrent.BlockingQueue;
-import java.util.stream.Collectors;
 
 @Singleton
 class FileOpenRequestHandler {
diff --git a/src/main/java/org/cryptomator/launcher/IpcMessageHandler.java b/src/main/java/org/cryptomator/launcher/IpcMessageHandler.java
index 5c28d05a..05565f97 100644
--- a/src/main/java/org/cryptomator/launcher/IpcMessageHandler.java
+++ b/src/main/java/org/cryptomator/launcher/IpcMessageHandler.java
@@ -1,7 +1,6 @@
 package org.cryptomator.launcher;
 
 import org.cryptomator.ipc.IpcMessageListener;
-import org.cryptomator.ui.launcher.AppLaunchEvent;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
diff --git a/src/main/java/org/cryptomator/ui/addvaultwizard/AddVaultModule.java b/src/main/java/org/cryptomator/ui/addvaultwizard/AddVaultModule.java
index 8a5a776e..c6acbadf 100644
--- a/src/main/java/org/cryptomator/ui/addvaultwizard/AddVaultModule.java
+++ b/src/main/java/org/cryptomator/ui/addvaultwizard/AddVaultModule.java
@@ -14,7 +14,7 @@ import org.cryptomator.ui.common.FxmlScene;
 import org.cryptomator.ui.common.NewPasswordController;
 import org.cryptomator.ui.common.PasswordStrengthUtil;
 import org.cryptomator.ui.common.StageFactory;
-import org.cryptomator.ui.mainwindow.MainWindow;
+import org.cryptomator.ui.fxapp.PrimaryStage;
 import org.cryptomator.ui.recoverykey.RecoveryKeyDisplayController;
 
 import javax.inject.Named;
@@ -43,12 +43,12 @@ public abstract class AddVaultModule {
 	@Provides
 	@AddVaultWizardWindow
 	@AddVaultWizardScoped
-	static Stage provideStage(StageFactory factory, @MainWindow Stage owner, ResourceBundle resourceBundle) {
+	static Stage provideStage(StageFactory factory, @PrimaryStage Stage primaryStage, ResourceBundle resourceBundle) {
 		Stage stage = factory.create();
 		stage.setTitle(resourceBundle.getString("addvaultwizard.title"));
 		stage.setResizable(false);
 		stage.initModality(Modality.WINDOW_MODAL);
-		stage.initOwner(owner);
+		stage.initOwner(primaryStage);
 		return stage;
 	}
 
diff --git a/src/main/java/org/cryptomator/ui/addvaultwizard/AddVaultSuccessController.java b/src/main/java/org/cryptomator/ui/addvaultwizard/AddVaultSuccessController.java
index 99d01577..e0306b4e 100644
--- a/src/main/java/org/cryptomator/ui/addvaultwizard/AddVaultSuccessController.java
+++ b/src/main/java/org/cryptomator/ui/addvaultwizard/AddVaultSuccessController.java
@@ -2,25 +2,24 @@ package org.cryptomator.ui.addvaultwizard;
 
 import org.cryptomator.common.vaults.Vault;
 import org.cryptomator.ui.common.FxController;
-import org.cryptomator.ui.fxapp.FxApplication;
+import org.cryptomator.ui.fxapp.FxApplicationWindows;
 
 import javax.inject.Inject;
 import javafx.beans.property.ObjectProperty;
 import javafx.beans.property.ReadOnlyObjectProperty;
 import javafx.fxml.FXML;
 import javafx.stage.Stage;
-import java.util.Optional;
 
 @AddVaultWizardScoped
 public class AddVaultSuccessController implements FxController {
 
-	private final FxApplication fxApplication;
+	private final FxApplicationWindows appWindows;
 	private final Stage window;
 	private final ReadOnlyObjectProperty<Vault> vault;
 
 	@Inject
-	AddVaultSuccessController(FxApplication fxApplication, @AddVaultWizardWindow Stage window, @AddVaultWizardWindow ObjectProperty<Vault> vault) {
-		this.fxApplication = fxApplication;
+	AddVaultSuccessController(FxApplicationWindows appWindows, @AddVaultWizardWindow Stage window, @AddVaultWizardWindow ObjectProperty<Vault> vault) {
+		this.appWindows = appWindows;
 		this.window = window;
 		this.vault = vault;
 	}
@@ -28,7 +27,7 @@ public class AddVaultSuccessController implements FxController {
 	@FXML
 	public void unlockAndClose() {
 		close();
-		fxApplication.startUnlockWorkflow(vault.get(), Optional.of(window));
+		appWindows.startUnlockWorkflow(vault.get(), window);
 	}
 
 	@FXML
diff --git a/src/main/java/org/cryptomator/ui/addvaultwizard/ChooseExistingVaultController.java b/src/main/java/org/cryptomator/ui/addvaultwizard/ChooseExistingVaultController.java
index 4fceaa92..deaa9fdd 100644
--- a/src/main/java/org/cryptomator/ui/addvaultwizard/ChooseExistingVaultController.java
+++ b/src/main/java/org/cryptomator/ui/addvaultwizard/ChooseExistingVaultController.java
@@ -8,6 +8,7 @@ import org.cryptomator.ui.common.ErrorComponent;
 import org.cryptomator.ui.common.FxController;
 import org.cryptomator.ui.common.FxmlFile;
 import org.cryptomator.ui.common.FxmlScene;
+import org.cryptomator.ui.fxapp.FxApplicationWindows;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -34,7 +35,7 @@ public class ChooseExistingVaultController implements FxController {
 	private final Stage window;
 	private final Lazy<Scene> welcomeScene;
 	private final Lazy<Scene> successScene;
-	private final ErrorComponent.Builder errorComponent;
+	private final FxApplicationWindows appWindows;
 	private final ObjectProperty<Path> vaultPath;
 	private final ObjectProperty<Vault> vault;
 	private final VaultListManager vaultListManager;
@@ -43,11 +44,11 @@ public class ChooseExistingVaultController implements FxController {
 	private Image screenshot;
 
 	@Inject
-	ChooseExistingVaultController(@AddVaultWizardWindow Stage window, @FxmlScene(FxmlFile.ADDVAULT_WELCOME) Lazy<Scene> welcomeScene, @FxmlScene(FxmlFile.ADDVAULT_SUCCESS) Lazy<Scene> successScene, ErrorComponent.Builder errorComponent, ObjectProperty<Path> vaultPath, @AddVaultWizardWindow ObjectProperty<Vault> vault, VaultListManager vaultListManager, ResourceBundle resourceBundle) {
+	ChooseExistingVaultController(@AddVaultWizardWindow Stage window, @FxmlScene(FxmlFile.ADDVAULT_WELCOME) Lazy<Scene> welcomeScene, @FxmlScene(FxmlFile.ADDVAULT_SUCCESS) Lazy<Scene> successScene, FxApplicationWindows appWindows, ObjectProperty<Path> vaultPath, @AddVaultWizardWindow ObjectProperty<Vault> vault, VaultListManager vaultListManager, ResourceBundle resourceBundle) {
 		this.window = window;
 		this.welcomeScene = welcomeScene;
 		this.successScene = successScene;
-		this.errorComponent = errorComponent;
+		this.appWindows = appWindows;
 		this.vaultPath = vaultPath;
 		this.vault = vault;
 		this.vaultListManager = vaultListManager;
@@ -82,7 +83,7 @@ public class ChooseExistingVaultController implements FxController {
 				window.setScene(successScene.get());
 			} catch (IOException e) {
 				LOG.error("Failed to open existing vault.", e);
-				errorComponent.cause(e).window(window).returnToScene(window.getScene()).build().showErrorScene();
+				appWindows.showErrorWindow(e, window, window.getScene());
 			}
 		}
 	}
diff --git a/src/main/java/org/cryptomator/ui/addvaultwizard/CreateNewVaultPasswordController.java b/src/main/java/org/cryptomator/ui/addvaultwizard/CreateNewVaultPasswordController.java
index 578b9096..51a8a114 100644
--- a/src/main/java/org/cryptomator/ui/addvaultwizard/CreateNewVaultPasswordController.java
+++ b/src/main/java/org/cryptomator/ui/addvaultwizard/CreateNewVaultPasswordController.java
@@ -10,12 +10,12 @@ import org.cryptomator.cryptolib.api.CryptorProvider;
 import org.cryptomator.cryptolib.api.Masterkey;
 import org.cryptomator.cryptolib.api.MasterkeyLoader;
 import org.cryptomator.cryptolib.common.MasterkeyFileAccess;
-import org.cryptomator.ui.common.ErrorComponent;
 import org.cryptomator.ui.common.FxController;
 import org.cryptomator.ui.common.FxmlFile;
 import org.cryptomator.ui.common.FxmlScene;
 import org.cryptomator.ui.common.NewPasswordController;
 import org.cryptomator.ui.common.Tasks;
+import org.cryptomator.ui.fxapp.FxApplicationWindows;
 import org.cryptomator.ui.keyloading.masterkeyfile.MasterkeyFileLoadingStrategy;
 import org.cryptomator.ui.recoverykey.RecoveryKeyFactory;
 import org.slf4j.Logger;
@@ -60,7 +60,7 @@ public class CreateNewVaultPasswordController implements FxController {
 	private final Lazy<Scene> chooseLocationScene;
 	private final Lazy<Scene> recoveryKeyScene;
 	private final Lazy<Scene> successScene;
-	private final ErrorComponent.Builder errorComponent;
+	private final FxApplicationWindows appWindows;
 	private final ExecutorService executor;
 	private final RecoveryKeyFactory recoveryKeyFactory;
 	private final StringProperty vaultNameProperty;
@@ -83,12 +83,12 @@ public class CreateNewVaultPasswordController implements FxController {
 	public NewPasswordController newPasswordSceneController;
 
 	@Inject
-	CreateNewVaultPasswordController(@AddVaultWizardWindow Stage window, @FxmlScene(FxmlFile.ADDVAULT_NEW_LOCATION) Lazy<Scene> chooseLocationScene, @FxmlScene(FxmlFile.ADDVAULT_NEW_RECOVERYKEY) Lazy<Scene> recoveryKeyScene, @FxmlScene(FxmlFile.ADDVAULT_SUCCESS) Lazy<Scene> successScene, ErrorComponent.Builder errorComponent, ExecutorService executor, RecoveryKeyFactory recoveryKeyFactory, @Named("vaultName") StringProperty vaultName, ObjectProperty<Path> vaultPath, @AddVaultWizardWindow ObjectProperty<Vault> vault, @Named("recoveryKey") StringProperty recoveryKey, VaultListManager vaultListManager, ResourceBundle resourceBundle, ReadmeGenerator readmeGenerator, SecureRandom csprng, MasterkeyFileAccess masterkeyFileAccess) {
+	CreateNewVaultPasswordController(@AddVaultWizardWindow Stage window, @FxmlScene(FxmlFile.ADDVAULT_NEW_LOCATION) Lazy<Scene> chooseLocationScene, @FxmlScene(FxmlFile.ADDVAULT_NEW_RECOVERYKEY) Lazy<Scene> recoveryKeyScene, @FxmlScene(FxmlFile.ADDVAULT_SUCCESS) Lazy<Scene> successScene, FxApplicationWindows appWindows, ExecutorService executor, RecoveryKeyFactory recoveryKeyFactory, @Named("vaultName") StringProperty vaultName, ObjectProperty<Path> vaultPath, @AddVaultWizardWindow ObjectProperty<Vault> vault, @Named("recoveryKey") StringProperty recoveryKey, VaultListManager vaultListManager, ResourceBundle resourceBundle, ReadmeGenerator readmeGenerator, SecureRandom csprng, MasterkeyFileAccess masterkeyFileAccess) {
 		this.window = window;
 		this.chooseLocationScene = chooseLocationScene;
 		this.recoveryKeyScene = recoveryKeyScene;
 		this.successScene = successScene;
-		this.errorComponent = errorComponent;
+		this.appWindows = appWindows;
 		this.executor = executor;
 		this.recoveryKeyFactory = recoveryKeyFactory;
 		this.vaultNameProperty = vaultName;
@@ -127,7 +127,7 @@ public class CreateNewVaultPasswordController implements FxController {
 			Files.createDirectory(pathToVault);
 		} catch (IOException e) {
 			LOG.error("Failed to create vault directory.", e);
-			errorComponent.cause(e).window(window).returnToScene(window.getScene()).build().showErrorScene();
+			appWindows.showErrorWindow(e, window, window.getScene());
 			return;
 		}
 
@@ -152,7 +152,7 @@ public class CreateNewVaultPasswordController implements FxController {
 			window.setScene(recoveryKeyScene.get());
 		}).onError(IOException.class, e -> {
 			LOG.error("Failed to initialize vault.", e);
-			errorComponent.cause(e).window(window).returnToScene(window.getScene()).build().showErrorScene();
+			appWindows.showErrorWindow(e, window, window.getScene());
 		}).andFinally(() -> {
 			processing.set(false);
 		}).runOnce(executor);
@@ -168,7 +168,7 @@ public class CreateNewVaultPasswordController implements FxController {
 			window.setScene(successScene.get());
 		}).onError(IOException.class, e -> {
 			LOG.error("Failed to initialize vault.", e);
-			errorComponent.cause(e).window(window).returnToScene(window.getScene()).build().showErrorScene();
+			appWindows.showErrorWindow(e, window, window.getScene());
 		}).andFinally(() -> {
 			processing.set(false);
 		}).runOnce(executor);
diff --git a/src/main/java/org/cryptomator/ui/changepassword/ChangePasswordController.java b/src/main/java/org/cryptomator/ui/changepassword/ChangePasswordController.java
index c715f046..200a7032 100644
--- a/src/main/java/org/cryptomator/ui/changepassword/ChangePasswordController.java
+++ b/src/main/java/org/cryptomator/ui/changepassword/ChangePasswordController.java
@@ -8,10 +8,10 @@ import org.cryptomator.cryptolib.api.InvalidPassphraseException;
 import org.cryptomator.cryptolib.common.MasterkeyFileAccess;
 import org.cryptomator.integrations.keychain.KeychainAccessException;
 import org.cryptomator.ui.common.Animations;
-import org.cryptomator.ui.common.ErrorComponent;
 import org.cryptomator.ui.common.FxController;
 import org.cryptomator.ui.common.NewPasswordController;
 import org.cryptomator.ui.controls.NiceSecurePasswordField;
+import org.cryptomator.ui.fxapp.FxApplicationWindows;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -26,7 +26,6 @@ import java.nio.file.Files;
 import java.nio.file.Path;
 import java.nio.file.StandardCopyOption;
 import java.nio.file.StandardOpenOption;
-import java.security.SecureRandom;
 
 import static org.cryptomator.common.Constants.MASTERKEY_BACKUP_SUFFIX;
 import static org.cryptomator.common.Constants.MASTERKEY_FILENAME;
@@ -38,9 +37,8 @@ public class ChangePasswordController implements FxController {
 
 	private final Stage window;
 	private final Vault vault;
-	private final ErrorComponent.Builder errorComponent;
+	private final FxApplicationWindows appWindows;
 	private final KeychainManager keychain;
-	private final SecureRandom csprng;
 	private final MasterkeyFileAccess masterkeyFileAccess;
 
 	public NiceSecurePasswordField oldPasswordField;
@@ -49,12 +47,11 @@ public class ChangePasswordController implements FxController {
 	public NewPasswordController newPasswordController;
 
 	@Inject
-	public ChangePasswordController(@ChangePasswordWindow Stage window, @ChangePasswordWindow Vault vault, ErrorComponent.Builder errorComponent, KeychainManager keychain, SecureRandom csprng, MasterkeyFileAccess masterkeyFileAccess) {
+	public ChangePasswordController(@ChangePasswordWindow Stage window, @ChangePasswordWindow Vault vault, FxApplicationWindows appWindows, KeychainManager keychain, MasterkeyFileAccess masterkeyFileAccess) {
 		this.window = window;
 		this.vault = vault;
-		this.errorComponent = errorComponent;
+		this.appWindows = appWindows;
 		this.keychain = keychain;
-		this.csprng = csprng;
 		this.masterkeyFileAccess = masterkeyFileAccess;
 	}
 
@@ -95,7 +92,7 @@ public class ChangePasswordController implements FxController {
 			oldPasswordField.requestFocus();
 		} catch (IOException | CryptoException e) {
 			LOG.error("Password change failed. Unable to perform operation.", e);
-			errorComponent.cause(e).window(window).returnToScene(window.getScene()).build().showErrorScene();
+			appWindows.showErrorWindow(e, window, window.getScene());
 		}
 	}
 
diff --git a/src/main/java/org/cryptomator/ui/common/ErrorComponent.java b/src/main/java/org/cryptomator/ui/common/ErrorComponent.java
index 92276f5b..2f449ec4 100644
--- a/src/main/java/org/cryptomator/ui/common/ErrorComponent.java
+++ b/src/main/java/org/cryptomator/ui/common/ErrorComponent.java
@@ -16,34 +16,17 @@ public interface ErrorComponent {
 	@FxmlScene(FxmlFile.ERROR)
 	Scene scene();
 
-	default void showErrorScene() {
-		if (Platform.isFxApplicationThread()) {
-			show();
-		} else {
-			Platform.runLater(this::show);
-		}
-	}
-
-	private void show() {
+	default Stage show() {
 		Stage stage = window();
 		stage.setScene(scene());
 		stage.show();
+		return stage;
 	}
 
-	@Subcomponent.Builder
-	interface Builder {
-
-		@BindsInstance
-		Builder cause(Throwable cause);
-
-		@BindsInstance
-		Builder window(Stage window);
-
-		@BindsInstance
-		Builder returnToScene(@Nullable Scene previousScene);
-
-		ErrorComponent build();
+	@Subcomponent.Factory
+	interface Factory {
 
+		ErrorComponent create(@BindsInstance Throwable cause, @BindsInstance Stage window, @BindsInstance @Nullable Scene previousScene);
 	}
 
 }
diff --git a/src/main/java/org/cryptomator/ui/common/VaultService.java b/src/main/java/org/cryptomator/ui/common/VaultService.java
index b81ddec4..a6486f35 100644
--- a/src/main/java/org/cryptomator/ui/common/VaultService.java
+++ b/src/main/java/org/cryptomator/ui/common/VaultService.java
@@ -10,6 +10,7 @@ import org.slf4j.LoggerFactory;
 
 import javax.inject.Inject;
 import javafx.concurrent.Task;
+import javafx.stage.Stage;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Iterator;
@@ -53,7 +54,9 @@ public class VaultService {
 	 *
 	 * @param vault The vault to lock
 	 * @param forced Whether to attempt a forced lock
+	 * @deprecated use {@link org.cryptomator.ui.fxapp.FxApplicationWindows#startLockWorkflow(Vault, Stage)}
 	 */
+	@Deprecated
 	public void lock(Vault vault, boolean forced) {
 		executorService.execute(createLockTask(vault, forced));
 	}
@@ -90,7 +93,7 @@ public class VaultService {
 	 * @return Meta-Task that waits until all vaults are locked or fails after the first failure of a subtask
 	 */
 	public Task<Collection<Vault>> createLockAllTask(Collection<Vault> vaults, boolean forced) {
-		List<Task<Vault>> lockTasks = vaults.stream().map(v -> new LockVaultTask(v, forced)).collect(Collectors.toUnmodifiableList());
+		List<Task<Vault>> lockTasks = vaults.stream().<Task<Vault>>map(v -> new LockVaultTask(v, forced)).toList();
 		lockTasks.forEach(executorService::execute);
 		Task<Collection<Vault>> task = new WaitForTasksTask(lockTasks);
 		String vaultNames = vaults.stream().map(Vault::getDisplayName).collect(Collectors.joining(", "));
diff --git a/src/main/java/org/cryptomator/ui/launcher/AppLaunchEventHandler.java b/src/main/java/org/cryptomator/ui/fxapp/AppLaunchEventHandler.java
similarity index 72%
rename from src/main/java/org/cryptomator/ui/launcher/AppLaunchEventHandler.java
rename to src/main/java/org/cryptomator/ui/fxapp/AppLaunchEventHandler.java
index 52ba838c..39e40600 100644
--- a/src/main/java/org/cryptomator/ui/launcher/AppLaunchEventHandler.java
+++ b/src/main/java/org/cryptomator/ui/fxapp/AppLaunchEventHandler.java
@@ -1,14 +1,14 @@
-package org.cryptomator.ui.launcher;
+package org.cryptomator.ui.fxapp;
 
 import org.cryptomator.common.vaults.Vault;
 import org.cryptomator.common.vaults.VaultListManager;
-import org.cryptomator.ui.fxapp.FxApplication;
+import org.cryptomator.launcher.AppLaunchEvent;
+import org.cryptomator.ui.common.VaultService;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 import javax.inject.Inject;
 import javax.inject.Named;
-import javax.inject.Singleton;
 import javafx.application.Platform;
 import java.io.IOException;
 import java.nio.file.Path;
@@ -17,22 +17,25 @@ import java.util.concurrent.ExecutorService;
 
 import static org.cryptomator.common.Constants.CRYPTOMATOR_FILENAME_EXT;
 
-@Singleton
+// TODO: use message bus
+@FxApplicationScoped
 class AppLaunchEventHandler {
 
 	private static final Logger LOG = LoggerFactory.getLogger(AppLaunchEventHandler.class);
 
 	private final BlockingQueue<AppLaunchEvent> launchEventQueue;
 	private final ExecutorService executorService;
-	private final FxApplicationStarter fxApplicationStarter;
+	private final FxApplicationWindows appWindows;
 	private final VaultListManager vaultListManager;
+	private final VaultService vaultService;
 
 	@Inject
-	public AppLaunchEventHandler(@Named("launchEventQueue") BlockingQueue<AppLaunchEvent> launchEventQueue, ExecutorService executorService, FxApplicationStarter fxApplicationStarter, VaultListManager vaultListManager) {
+	public AppLaunchEventHandler(@Named("launchEventQueue") BlockingQueue<AppLaunchEvent> launchEventQueue, ExecutorService executorService, FxApplicationWindows appWindows, VaultListManager vaultListManager, VaultService vaultService) {
 		this.launchEventQueue = launchEventQueue;
 		this.executorService = executorService;
-		this.fxApplicationStarter = fxApplicationStarter;
+		this.appWindows = appWindows;
 		this.vaultListManager = vaultListManager;
+		this.vaultService = vaultService;
 	}
 
 	public void startHandlingLaunchEvents() {
@@ -52,14 +55,12 @@ class AppLaunchEventHandler {
 	}
 
 	private void handleLaunchEvent(AppLaunchEvent event) {
-		switch (event.getType()) {
-			case REVEAL_APP -> fxApplicationStarter.get().thenAccept(FxApplication::showMainWindow);
-			case OPEN_FILE -> fxApplicationStarter.get().thenRun(() -> {
-				Platform.runLater(() -> {
-					event.getPathsToOpen().forEach(this::addOrRevealVault);
-				});
+		switch (event.type()) {
+			case REVEAL_APP -> appWindows.showMainWindow();
+			case OPEN_FILE -> Platform.runLater(() -> {
+				event.pathsToOpen().forEach(this::addOrRevealVault);
 			});
-			default -> LOG.warn("Unsupported event type: {}", event.getType());
+			default -> LOG.warn("Unsupported event type: {}", event.type());
 		}
 	}
 
@@ -75,7 +76,7 @@ class AppLaunchEventHandler {
 			}
 
 			if (v.isUnlocked()) {
-				fxApplicationStarter.get().thenAccept(app -> app.getVaultService().reveal(v));
+				vaultService.reveal(v);
 			}
 			LOG.debug("Added vault {}", potentialVaultPath);
 		} catch (IOException e) {
diff --git a/src/main/java/org/cryptomator/ui/fxapp/AutoUnlocker.java b/src/main/java/org/cryptomator/ui/fxapp/AutoUnlocker.java
new file mode 100644
index 00000000..9d6a73fa
--- /dev/null
+++ b/src/main/java/org/cryptomator/ui/fxapp/AutoUnlocker.java
@@ -0,0 +1,26 @@
+package org.cryptomator.ui.fxapp;
+
+import org.cryptomator.common.vaults.Vault;
+
+import javax.inject.Inject;
+import javafx.collections.ObservableList;
+
+@FxApplicationScoped
+public class AutoUnlocker {
+
+	private final ObservableList<Vault> vaults;
+	private final FxApplicationWindows appWindows;
+
+	@Inject
+	public AutoUnlocker(ObservableList<Vault> vaults, FxApplicationWindows appWindows) {
+		this.vaults = vaults;
+		this.appWindows = appWindows;
+	}
+
+	public void unlock() {
+		vaults.stream().filter(Vault::isLocked).filter(v -> v.getVaultSettings().unlockAfterStartup().get()).forEach(v -> {
+			appWindows.startUnlockWorkflow(v, null);
+		});
+	}
+
+}
diff --git a/src/main/java/org/cryptomator/ui/fxapp/ExitingQuitResponse.java b/src/main/java/org/cryptomator/ui/fxapp/ExitingQuitResponse.java
new file mode 100644
index 00000000..ae2bcd43
--- /dev/null
+++ b/src/main/java/org/cryptomator/ui/fxapp/ExitingQuitResponse.java
@@ -0,0 +1,20 @@
+package org.cryptomator.ui.fxapp;
+
+import javafx.application.Platform;
+import java.awt.desktop.QuitResponse;
+
+record ExitingQuitResponse(QuitResponse delegate) implements QuitResponse {
+
+	@Override
+	public void performQuit() {
+		Platform.exit();
+		// TODO wait a moment for javafx to terminate?
+		delegate.performQuit();
+	}
+
+	@Override
+	public void cancelQuit() {
+		delegate.cancelQuit();
+	}
+
+}
diff --git a/src/main/java/org/cryptomator/ui/fxapp/FxApplication.java b/src/main/java/org/cryptomator/ui/fxapp/FxApplication.java
index d2b11147..05746632 100644
--- a/src/main/java/org/cryptomator/ui/fxapp/FxApplication.java
+++ b/src/main/java/org/cryptomator/ui/fxapp/FxApplication.java
@@ -1,208 +1,68 @@
 package org.cryptomator.ui.fxapp;
 
 import dagger.Lazy;
-import javafx.application.Application;
-import javafx.application.Platform;
-import javafx.beans.binding.Bindings;
-import javafx.beans.binding.BooleanBinding;
-import javafx.beans.value.ObservableValue;
-import javafx.collections.ObservableList;
-import javafx.stage.Stage;
-import javafx.stage.Window;
-import org.cryptomator.common.LicenseHolder;
 import org.cryptomator.common.settings.Settings;
-import org.cryptomator.common.settings.UiTheme;
-import org.cryptomator.common.vaults.Vault;
-import org.cryptomator.common.vaults.VaultListManager;
-import org.cryptomator.common.vaults.VaultState;
-import org.cryptomator.integrations.tray.TrayIntegrationProvider;
-import org.cryptomator.integrations.uiappearance.Theme;
-import org.cryptomator.integrations.uiappearance.UiAppearanceException;
-import org.cryptomator.integrations.uiappearance.UiAppearanceListener;
-import org.cryptomator.integrations.uiappearance.UiAppearanceProvider;
-import org.cryptomator.ui.common.ErrorComponent;
-import org.cryptomator.ui.common.VaultService;
-import org.cryptomator.ui.lock.LockComponent;
-import org.cryptomator.ui.mainwindow.MainWindowComponent;
-import org.cryptomator.ui.preferences.PreferencesComponent;
-import org.cryptomator.ui.preferences.SelectedPreferencesTab;
-import org.cryptomator.ui.quit.QuitComponent;
-import org.cryptomator.ui.unlock.UnlockComponent;
+import org.cryptomator.ui.traymenu.TrayMenuComponent;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 import javax.inject.Inject;
-import javax.inject.Provider;
-import java.awt.desktop.QuitResponse;
-import java.util.Optional;
-import java.util.concurrent.CompletableFuture;
-import java.util.concurrent.CompletionStage;
-import java.util.concurrent.ScheduledExecutorService;
-import java.util.concurrent.TimeUnit;
+import javafx.application.Platform;
+import javafx.stage.Stage;
+import javafx.stage.StageStyle;
+import java.awt.SystemTray;
 
 @FxApplicationScoped
 public class FxApplication {
 
 	private static final Logger LOG = LoggerFactory.getLogger(FxApplication.class);
 
+	private final Stage primaryStage;
 	private final Settings settings;
-	private final Lazy<MainWindowComponent> mainWindow;
-	private final Lazy<PreferencesComponent> preferencesWindow;
-	private final Lazy<QuitComponent> quitWindow;
-	private final Provider<UnlockComponent.Builder> unlockWorkflowBuilderProvider;
-	private final Provider<LockComponent.Builder> lockWorkflowBuilderProvider;
-	private final ErrorComponent.Builder errorWindowBuilder;
-	private final Optional<TrayIntegrationProvider> trayIntegration;
-	private final Optional<UiAppearanceProvider> appearanceProvider;
-	private final VaultService vaultService;
-	private final LicenseHolder licenseHolder;
-	private final ObservableList<Window> visibleWindows;
-	private final BooleanBinding hasVisibleWindows;
-	private final UiAppearanceListener systemInterfaceThemeListener = this::systemInterfaceThemeChanged;
+	private final AppLaunchEventHandler launchEventHandler;
+	private final Lazy<TrayMenuComponent> trayMenu;
+	private final FxApplicationWindows appWindows;
+	private final FxApplicationStyle applicationStyle;
+	private final FxApplicationTerminator applicationTerminator;
+	private final AutoUnlocker autoUnlocker;
 
 	@Inject
-	FxApplication(Settings settings, Lazy<MainWindowComponent> mainWindow, Lazy<PreferencesComponent> preferencesWindow, Provider<UnlockComponent.Builder> unlockWorkflowBuilderProvider, Provider<LockComponent.Builder> lockWorkflowBuilderProvider, Lazy<QuitComponent> quitWindow, ErrorComponent.Builder errorWindowBuilder, Optional<TrayIntegrationProvider> trayIntegration, Optional<UiAppearanceProvider> appearanceProvider, VaultService vaultService, LicenseHolder licenseHolder) {
+	FxApplication(@PrimaryStage Stage primaryStage, Settings settings, AppLaunchEventHandler launchEventHandler, Lazy<TrayMenuComponent> trayMenu, FxApplicationWindows appWindows, FxApplicationStyle applicationStyle, FxApplicationTerminator applicationTerminator, AutoUnlocker autoUnlocker) {
+		this.primaryStage = primaryStage;
 		this.settings = settings;
-		this.mainWindow = mainWindow;
-		this.preferencesWindow = preferencesWindow;
-		this.unlockWorkflowBuilderProvider = unlockWorkflowBuilderProvider;
-		this.lockWorkflowBuilderProvider = lockWorkflowBuilderProvider;
-		this.quitWindow = quitWindow;
-		this.errorWindowBuilder = errorWindowBuilder;
-		this.trayIntegration = trayIntegration;
-		this.appearanceProvider = appearanceProvider;
-		this.vaultService = vaultService;
-		this.licenseHolder = licenseHolder;
-		this.visibleWindows = Stage.getWindows().filtered(Window::isShowing);
-		this.hasVisibleWindows = Bindings.isNotEmpty(visibleWindows);
+		this.launchEventHandler = launchEventHandler;
+		this.trayMenu = trayMenu;
+		this.appWindows = appWindows;
+		this.applicationStyle = applicationStyle;
+		this.applicationTerminator = applicationTerminator;
+		this.autoUnlocker = autoUnlocker;
 	}
 
 	public void start() {
 		LOG.trace("FxApplication.start()");
-		Platform.setImplicitExit(false);
-
-		hasVisibleWindows.addListener(this::hasVisibleStagesChanged);
-
-		settings.theme().addListener(this::appThemeChanged);
-		loadSelectedStyleSheet(settings.theme().get());
-	}
-
-	private void hasVisibleStagesChanged(@SuppressWarnings("unused") ObservableValue<? extends Boolean> observableValue, @SuppressWarnings("unused") boolean oldValue, boolean newValue) {
-		LOG.debug("has visible stages: {}", newValue);
-		if (newValue) {
-			trayIntegration.ifPresent(TrayIntegrationProvider::restoredFromTray);
-		} else {
-			trayIntegration.ifPresent(TrayIntegrationProvider::minimizedToTray);
-		}
-	}
-
-	public void showPreferencesWindow(SelectedPreferencesTab selectedTab) {
-		Platform.runLater(() -> {
-			preferencesWindow.get().showPreferencesWindow(selectedTab);
-			LOG.debug("Showing Preferences");
-		});
-	}
-
-	public CompletionStage<Stage> showMainWindow() {
-		CompletableFuture<Stage> future = new CompletableFuture<>();
-		Platform.runLater(() -> {
-			var win = mainWindow.get().showMainWindow();
-			LOG.debug("Showing MainWindow");
-			future.complete(win);
-		});
-		return future;
-	}
-
-	public void startUnlockWorkflow(Vault vault, Optional<Stage> owner) {
-		Platform.runLater(() -> {
-			if (vault.stateProperty().transition(VaultState.Value.LOCKED, VaultState.Value.PROCESSING)) {
-				unlockWorkflowBuilderProvider.get().vault(vault).owner(owner).build().startUnlockWorkflow();
-				LOG.debug("Start unlock workflow for {}", vault.getDisplayName());
-			} else {
-				showMainWindow().thenAccept(mainWindow -> errorWindowBuilder.window(mainWindow).cause(new IllegalStateException("Unable to unlock vault in non-locked state.")));
-			}
-		});
-	}
-
-	public void startLockWorkflow(Vault vault, Optional<Stage> owner) {
-		Platform.runLater(() -> {
-			if (vault.stateProperty().transition(VaultState.Value.UNLOCKED, VaultState.Value.PROCESSING)) {
-				lockWorkflowBuilderProvider.get().vault(vault).owner(owner).build().startLockWorkflow();
-				LOG.debug("Start lock workflow for {}", vault.getDisplayName());
-			} else {
-				showMainWindow().thenAccept(mainWindow -> errorWindowBuilder.window(mainWindow).cause(new IllegalStateException("Unable to lock vault in non-unlocked state.")));
-			}
-		});
-	}
-
-	public void showQuitWindow(QuitResponse response) {
-		Platform.runLater(() -> {
-			quitWindow.get().showQuitWindow(response);
-			LOG.debug("Showing QuitWindow");
-		});
-	}
-
-	public VaultService getVaultService() {
-		return vaultService;
-	}
-
-	private void appThemeChanged(@SuppressWarnings("unused") ObservableValue<? extends UiTheme> observable, @SuppressWarnings("unused") UiTheme oldValue, UiTheme newValue) {
-		if (appearanceProvider.isPresent() && oldValue == UiTheme.AUTOMATIC && newValue != UiTheme.AUTOMATIC) {
-			try {
-				appearanceProvider.get().removeListener(systemInterfaceThemeListener);
-			} catch (UiAppearanceException e) {
-				LOG.error("Failed to disable automatic theme switching.");
-			}
-		}
-		loadSelectedStyleSheet(newValue);
-	}
-
-	private void loadSelectedStyleSheet(UiTheme desiredTheme) {
-		UiTheme theme = licenseHolder.isValidLicense() ? desiredTheme : UiTheme.LIGHT;
-		switch (theme) {
-			case LIGHT -> applyLightTheme();
-			case DARK -> applyDarkTheme();
-			case AUTOMATIC -> {
-				appearanceProvider.ifPresent(appearanceProvider -> {
-					try {
-						appearanceProvider.addListener(systemInterfaceThemeListener);
-					} catch (UiAppearanceException e) {
-						LOG.error("Failed to enable automatic theme switching.");
-					}
-				});
-				applySystemTheme();
-			}
-		}
-	}
-
-	private void systemInterfaceThemeChanged(Theme theme) {
-		switch (theme) {
-			case LIGHT -> applyLightTheme();
-			case DARK -> applyDarkTheme();
-		}
-	}
-
-	private void applySystemTheme() {
-		if (appearanceProvider.isPresent()) {
-			systemInterfaceThemeChanged(appearanceProvider.get().getSystemTheme());
-		} else {
-			LOG.warn("No UiAppearanceProvider present, assuming LIGHT theme...");
-			applyLightTheme();
+		primaryStage.setTitle("Cryptomator");
+		primaryStage.initStyle(StageStyle.UNDECORATED);
+		primaryStage.setMinWidth(650);
+		primaryStage.setMinHeight(440);
+
+		applicationStyle.initialize();
+		appWindows.initialize();
+		applicationTerminator.initialize();
+
+		// init system tray
+		if (SystemTray.isSupported() && settings.showTrayIcon().get()) {
+			trayMenu.get().initializeTrayIcon();
+			Platform.setImplicitExit(false); // don't quit when closing all windows
 		}
-	}
 
-	private void applyLightTheme() {
-		Application.setUserAgentStylesheet(getClass().getResource("/css/light_theme.css").toString());
-		appearanceProvider.ifPresent(appearanceProvider -> {
-			appearanceProvider.adjustToTheme(Theme.LIGHT);
+		// show main window
+		appWindows.showMainWindow().thenAccept(stage -> {
+			boolean hide = settings.startHidden().get();
+			stage.setIconified(hide);
 		});
-	}
 
-	private void applyDarkTheme() {
-		Application.setUserAgentStylesheet(getClass().getResource("/css/dark_theme.css").toString());
-		appearanceProvider.ifPresent(appearanceProvider -> {
-			appearanceProvider.adjustToTheme(Theme.DARK);
-		});
+		launchEventHandler.startHandlingLaunchEvents();
+		autoUnlocker.unlock();
 	}
 
 }
diff --git a/src/main/java/org/cryptomator/ui/fxapp/FxApplicationComponent.java b/src/main/java/org/cryptomator/ui/fxapp/FxApplicationComponent.java
index de4134dd..2557aa9e 100644
--- a/src/main/java/org/cryptomator/ui/fxapp/FxApplicationComponent.java
+++ b/src/main/java/org/cryptomator/ui/fxapp/FxApplicationComponent.java
@@ -7,7 +7,6 @@ package org.cryptomator.ui.fxapp;
 
 import dagger.BindsInstance;
 import dagger.Subcomponent;
-import org.cryptomator.ui.mainwindow.MainWindow;
 
 import javafx.application.Application;
 import javafx.stage.Stage;
@@ -25,7 +24,7 @@ public interface FxApplicationComponent {
 		Builder fxApplication(Application application);
 
 		@BindsInstance
-		Builder mainWindow(@MainWindow Stage mainWindow);
+		Builder primaryStage(@PrimaryStage Stage primaryStage);
 
 		FxApplicationComponent build();
 	}
diff --git a/src/main/java/org/cryptomator/ui/fxapp/FxApplicationModule.java b/src/main/java/org/cryptomator/ui/fxapp/FxApplicationModule.java
index 737ddb7c..68c97426 100644
--- a/src/main/java/org/cryptomator/ui/fxapp/FxApplicationModule.java
+++ b/src/main/java/org/cryptomator/ui/fxapp/FxApplicationModule.java
@@ -14,6 +14,7 @@ import org.cryptomator.ui.lock.LockComponent;
 import org.cryptomator.ui.mainwindow.MainWindowComponent;
 import org.cryptomator.ui.preferences.PreferencesComponent;
 import org.cryptomator.ui.quit.QuitComponent;
+import org.cryptomator.ui.traymenu.TrayMenuComponent;
 import org.cryptomator.ui.unlock.UnlockComponent;
 
 import javax.inject.Named;
@@ -24,7 +25,7 @@ import java.io.UncheckedIOException;
 import java.util.Collections;
 import java.util.List;
 
-@Module(includes = {UpdateCheckerModule.class}, subcomponents = {MainWindowComponent.class, PreferencesComponent.class, UnlockComponent.class, LockComponent.class, QuitComponent.class, ErrorComponent.class})
+@Module(includes = {UpdateCheckerModule.class}, subcomponents = {TrayMenuComponent.class, MainWindowComponent.class, PreferencesComponent.class, UnlockComponent.class, LockComponent.class, QuitComponent.class, ErrorComponent.class})
 abstract class FxApplicationModule {
 
 	@Provides
@@ -59,16 +60,25 @@ abstract class FxApplicationModule {
 	}
 
 	@Provides
+	@FxApplicationScoped
+	static TrayMenuComponent provideTrayMenuComponent(TrayMenuComponent.Builder builder) {
+		return builder.build();
+	}
+
+	@Provides
+	@FxApplicationScoped
 	static MainWindowComponent provideMainWindowComponent(MainWindowComponent.Builder builder) {
 		return builder.build();
 	}
 
 	@Provides
+	@FxApplicationScoped
 	static PreferencesComponent providePreferencesComponent(PreferencesComponent.Builder builder) {
 		return builder.build();
 	}
 
 	@Provides
+	@FxApplicationScoped
 	static QuitComponent provideQuitComponent(QuitComponent.Builder builder) {
 		return builder.build();
 	}
diff --git a/src/main/java/org/cryptomator/ui/fxapp/FxApplicationStyle.java b/src/main/java/org/cryptomator/ui/fxapp/FxApplicationStyle.java
new file mode 100644
index 00000000..90257671
--- /dev/null
+++ b/src/main/java/org/cryptomator/ui/fxapp/FxApplicationStyle.java
@@ -0,0 +1,98 @@
+package org.cryptomator.ui.fxapp;
+
+import org.cryptomator.common.LicenseHolder;
+import org.cryptomator.common.settings.Settings;
+import org.cryptomator.common.settings.UiTheme;
+import org.cryptomator.integrations.uiappearance.Theme;
+import org.cryptomator.integrations.uiappearance.UiAppearanceException;
+import org.cryptomator.integrations.uiappearance.UiAppearanceListener;
+import org.cryptomator.integrations.uiappearance.UiAppearanceProvider;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import javax.inject.Inject;
+import javafx.application.Application;
+import javafx.beans.value.ObservableValue;
+import java.util.Optional;
+
+@FxApplicationScoped
+public class FxApplicationStyle {
+
+	private static final Logger LOG = LoggerFactory.getLogger(FxApplicationStyle.class);
+
+	private final Settings settings;
+	private final Optional<UiAppearanceProvider> appearanceProvider;
+	private final LicenseHolder licenseHolder;
+	private final UiAppearanceListener systemInterfaceThemeListener = this::systemInterfaceThemeChanged;
+
+	@Inject
+	public FxApplicationStyle(Settings settings, Optional<UiAppearanceProvider> appearanceProvider, LicenseHolder licenseHolder){
+		this.settings = settings;
+		this.appearanceProvider = appearanceProvider;
+		this.licenseHolder = licenseHolder;
+	}
+
+	public void initialize() {
+		settings.theme().addListener(this::appThemeChanged);
+		loadSelectedStyleSheet(settings.theme().get());
+	}
+
+	private void appThemeChanged(@SuppressWarnings("unused") ObservableValue<? extends UiTheme> observable, @SuppressWarnings("unused") UiTheme oldValue, UiTheme newValue) {
+		if (appearanceProvider.isPresent() && oldValue == UiTheme.AUTOMATIC && newValue != UiTheme.AUTOMATIC) {
+			try {
+				appearanceProvider.get().removeListener(systemInterfaceThemeListener);
+			} catch (UiAppearanceException e) {
+				LOG.error("Failed to disable automatic theme switching.");
+			}
+		}
+		loadSelectedStyleSheet(newValue);
+	}
+
+	private void loadSelectedStyleSheet(UiTheme desiredTheme) {
+		UiTheme theme = licenseHolder.isValidLicense() ? desiredTheme : UiTheme.LIGHT;
+		switch (theme) {
+			case LIGHT -> applyLightTheme();
+			case DARK -> applyDarkTheme();
+			case AUTOMATIC -> {
+				appearanceProvider.ifPresent(appearanceProvider -> {
+					try {
+						appearanceProvider.addListener(systemInterfaceThemeListener);
+					} catch (UiAppearanceException e) {
+						LOG.error("Failed to enable automatic theme switching.");
+					}
+				});
+				applySystemTheme();
+			}
+		}
+	}
+
+	private void systemInterfaceThemeChanged(Theme theme) {
+		switch (theme) {
+			case LIGHT -> applyLightTheme();
+			case DARK -> applyDarkTheme();
+		}
+	}
+
+	private void applySystemTheme() {
+		if (appearanceProvider.isPresent()) {
+			systemInterfaceThemeChanged(appearanceProvider.get().getSystemTheme());
+		} else {
+			LOG.warn("No UiAppearanceProvider present, assuming LIGHT theme...");
+			applyLightTheme();
+		}
+	}
+
+	private void applyLightTheme() {
+		Application.setUserAgentStylesheet(getClass().getResource("/css/light_theme.css").toString());
+		appearanceProvider.ifPresent(appearanceProvider -> {
+			appearanceProvider.adjustToTheme(Theme.LIGHT);
+		});
+	}
+
+	private void applyDarkTheme() {
+		Application.setUserAgentStylesheet(getClass().getResource("/css/dark_theme.css").toString());
+		appearanceProvider.ifPresent(appearanceProvider -> {
+			appearanceProvider.adjustToTheme(Theme.DARK);
+		});
+	}
+}
diff --git a/src/main/java/org/cryptomator/ui/fxapp/FxApplicationTerminator.java b/src/main/java/org/cryptomator/ui/fxapp/FxApplicationTerminator.java
new file mode 100644
index 00000000..7e471bd1
--- /dev/null
+++ b/src/main/java/org/cryptomator/ui/fxapp/FxApplicationTerminator.java
@@ -0,0 +1,123 @@
+package org.cryptomator.ui.fxapp;
+
+import com.google.common.base.Preconditions;
+import org.cryptomator.common.ShutdownHook;
+import org.cryptomator.common.vaults.LockNotCompletedException;
+import org.cryptomator.common.vaults.Vault;
+import org.cryptomator.common.vaults.VaultState;
+import org.cryptomator.common.vaults.Volume;
+import org.jetbrains.annotations.Nullable;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import javax.inject.Inject;
+import javafx.beans.Observable;
+import javafx.collections.ObservableList;
+import java.awt.Desktop;
+import java.awt.desktop.QuitResponse;
+import java.awt.desktop.QuitStrategy;
+import java.util.EnumSet;
+import java.util.EventObject;
+import java.util.Set;
+import java.util.concurrent.atomic.AtomicBoolean;
+
+import static org.cryptomator.common.vaults.VaultState.Value.*;
+
+@FxApplicationScoped
+public class FxApplicationTerminator {
+
+	public static final Set<VaultState.Value> STATES_ALLOWING_TERMINATION = EnumSet.of(LOCKED, NEEDS_MIGRATION, MISSING, ERROR);
+
+	private static final Logger LOG = LoggerFactory.getLogger(FxApplicationTerminator.class);
+
+	private final ObservableList<Vault> vaults;
+	private final ShutdownHook shutdownHook;
+	private final FxApplicationWindows appWindows;
+	private final AtomicBoolean allowQuitWithoutPrompt = new AtomicBoolean();
+
+	@Inject
+	public FxApplicationTerminator(ObservableList<Vault> vaults, ShutdownHook shutdownHook, FxApplicationWindows appWindows){
+		this.vaults = vaults;
+		this.shutdownHook = shutdownHook;
+		this.appWindows = appWindows;
+	}
+
+	public void initialize() {
+		Preconditions.checkState(Desktop.isDesktopSupported(), "java.awt.Desktop not supported");
+		Desktop desktop = Desktop.getDesktop();
+
+		// register quit handler
+		if (desktop.isSupported(Desktop.Action.APP_QUIT_HANDLER)) {
+			desktop.setQuitHandler(this::handleQuitRequest);
+		}
+
+		// set quit strategy (cmd+q would call `System.exit(0)` otherwise)
+		if (desktop.isSupported(Desktop.Action.APP_QUIT_STRATEGY)) {
+			desktop.setQuitStrategy(QuitStrategy.CLOSE_ALL_WINDOWS);
+		}
+
+		// allow sudden termination?
+		vaults.addListener(this::vaultListChanged);
+
+		shutdownHook.runOnShutdown(this::forceUnmountRemainingVaults);
+	}
+
+	/**
+	 * Gracefully terminates the application.
+	 */
+	public void terminate() {
+		handleQuitRequest(null, new NoopQuitResponse());
+	}
+
+	private void vaultListChanged(@SuppressWarnings("unused") Observable observable) {
+		boolean allowSuddenTermination = vaults.stream().map(Vault::getState).allMatch(STATES_ALLOWING_TERMINATION::contains);
+		boolean stateChanged = allowQuitWithoutPrompt.compareAndSet(!allowSuddenTermination, allowSuddenTermination);
+		Desktop desktop = Desktop.getDesktop();
+		if (stateChanged && desktop.isSupported(Desktop.Action.APP_SUDDEN_TERMINATION)) {
+			if (allowSuddenTermination) {
+				LOG.debug("Enabling sudden termination");
+				desktop.enableSuddenTermination();
+			} else {
+				LOG.debug("Disabling sudden termination");
+				desktop.disableSuddenTermination();
+			}
+		}
+	}
+
+	private void handleQuitRequest(@SuppressWarnings("unused") @Nullable EventObject e, QuitResponse response) {
+		var exitingResponse = new ExitingQuitResponse(response);
+		if (allowQuitWithoutPrompt.get()) {
+			exitingResponse.performQuit();
+		} else {
+			appWindows.showQuitWindow(exitingResponse);
+		}
+	}
+
+	private void forceUnmountRemainingVaults() {
+		for (Vault vault : vaults) {
+			if (vault.isUnlocked()) {
+				try {
+					vault.lock(true);
+				} catch (Volume.VolumeException e) {
+					LOG.error("Failed to unmount vault " + vault.getPath(), e);
+				} catch (LockNotCompletedException e) {
+					LOG.error("Failed to lock vault " + vault.getPath(), e);
+				}
+			}
+		}
+	}
+
+	private class NoopQuitResponse implements QuitResponse {
+
+		@Override
+		public void performQuit() {
+			// no-op
+		}
+
+		@Override
+		public void cancelQuit() {
+			// no-op
+		}
+	}
+
+}
diff --git a/src/main/java/org/cryptomator/ui/fxapp/FxApplicationWindows.java b/src/main/java/org/cryptomator/ui/fxapp/FxApplicationWindows.java
new file mode 100644
index 00000000..fae7b1b9
--- /dev/null
+++ b/src/main/java/org/cryptomator/ui/fxapp/FxApplicationWindows.java
@@ -0,0 +1,146 @@
+package org.cryptomator.ui.fxapp;
+
+import com.google.common.base.Preconditions;
+import dagger.Lazy;
+import org.cryptomator.common.vaults.Vault;
+import org.cryptomator.common.vaults.VaultState;
+import org.cryptomator.integrations.tray.TrayIntegrationProvider;
+import org.cryptomator.ui.common.ErrorComponent;
+import org.cryptomator.ui.lock.LockComponent;
+import org.cryptomator.ui.mainwindow.MainWindowComponent;
+import org.cryptomator.ui.preferences.PreferencesComponent;
+import org.cryptomator.ui.preferences.SelectedPreferencesTab;
+import org.cryptomator.ui.quit.QuitComponent;
+import org.cryptomator.ui.unlock.UnlockComponent;
+import org.jetbrains.annotations.Nullable;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import javax.inject.Inject;
+import javafx.application.Platform;
+import javafx.beans.binding.Bindings;
+import javafx.beans.value.ObservableValue;
+import javafx.collections.transformation.FilteredList;
+import javafx.scene.Scene;
+import javafx.stage.Stage;
+import javafx.stage.Window;
+import java.awt.Desktop;
+import java.awt.desktop.AppReopenedListener;
+import java.awt.desktop.QuitResponse;
+import java.util.Optional;
+import java.util.concurrent.CompletableFuture;
+import java.util.concurrent.CompletionStage;
+
+@FxApplicationScoped
+public class FxApplicationWindows {
+
+	private static final Logger LOG = LoggerFactory.getLogger(FxApplicationWindows.class);
+
+	private final Stage primaryStage;
+	private final Optional<TrayIntegrationProvider> trayIntegration;
+	private final Lazy<MainWindowComponent> mainWindow;
+	private final Lazy<PreferencesComponent> preferencesWindow;
+	private final Lazy<QuitComponent> quitWindow;
+	private final UnlockComponent.Factory unlockWorkflowFactory;
+	private final LockComponent.Factory lockWorkflowFactory;
+	private final ErrorComponent.Factory errorWindowFactory;
+	private final FilteredList<Window> visibleWindows;
+
+	@Inject
+	public FxApplicationWindows(@PrimaryStage Stage primaryStage, Optional<TrayIntegrationProvider> trayIntegration, Lazy<MainWindowComponent> mainWindow, Lazy<PreferencesComponent> preferencesWindow, Lazy<QuitComponent> quitWindow, UnlockComponent.Factory unlockWorkflowFactory, LockComponent.Factory lockWorkflowFactory, ErrorComponent.Factory errorWindowFactory) {
+		this.primaryStage = primaryStage;
+		this.trayIntegration = trayIntegration;
+		this.mainWindow = mainWindow;
+		this.preferencesWindow = preferencesWindow;
+		this.quitWindow = quitWindow;
+		this.unlockWorkflowFactory = unlockWorkflowFactory;
+		this.lockWorkflowFactory = lockWorkflowFactory;
+		this.errorWindowFactory = errorWindowFactory;
+		this.visibleWindows = Stage.getWindows().filtered(Window::isShowing);
+	}
+
+	public void initialize() {
+		Preconditions.checkState(Desktop.isDesktopSupported(), "java.awt.Desktop not supported");
+		Desktop desktop = Desktop.getDesktop();
+
+		// register preferences shortcut
+		if (desktop.isSupported(Desktop.Action.APP_PREFERENCES)) {
+			desktop.setPreferencesHandler(evt -> showPreferencesWindow(SelectedPreferencesTab.ANY));
+		}
+
+		// register preferences shortcut
+		if (desktop.isSupported(Desktop.Action.APP_ABOUT)) {
+			desktop.setAboutHandler(evt -> showPreferencesWindow(SelectedPreferencesTab.ABOUT));
+		}
+
+		// register app reopen listener
+		if (desktop.isSupported(Desktop.Action.APP_EVENT_REOPENED)) {
+			desktop.addAppEventListener((AppReopenedListener) e -> showMainWindow());
+		}
+
+		// observe visible windows
+		if (trayIntegration.isPresent()) {
+			Bindings.isNotEmpty(visibleWindows).addListener(this::visibleWindowsChanged);
+		}
+	}
+
+	private void visibleWindowsChanged(@SuppressWarnings("unused") ObservableValue<? extends Boolean> observableValue, @SuppressWarnings("unused") boolean oldValue, boolean newValue) {
+		LOG.debug("has visible stages: {}", newValue);
+		if (newValue) {
+			trayIntegration.ifPresent(TrayIntegrationProvider::restoredFromTray);
+		} else {
+			trayIntegration.ifPresent(TrayIntegrationProvider::minimizedToTray);
+		}
+	}
+
+	public CompletionStage<Stage> showMainWindow() {
+		return CompletableFuture.supplyAsync(mainWindow.get()::showMainWindow, Platform::runLater);
+	}
+
+	public CompletionStage<Stage> showPreferencesWindow(SelectedPreferencesTab selectedTab) {
+		return CompletableFuture.supplyAsync(() -> preferencesWindow.get().showPreferencesWindow(selectedTab), Platform::runLater);
+	}
+
+	public CompletionStage<Stage> showQuitWindow(QuitResponse response) {
+		return CompletableFuture.supplyAsync(() -> quitWindow.get().showQuitWindow(response), Platform::runLater);
+	}
+
+	public CompletionStage<Void> startUnlockWorkflow(Vault vault, @Nullable Stage owner) {
+		return CompletableFuture.supplyAsync(() -> {
+					Preconditions.checkState(vault.stateProperty().transition(VaultState.Value.LOCKED, VaultState.Value.PROCESSING), "Vault not locked.");
+					LOG.debug("Start unlock workflow for {}", vault.getDisplayName());
+					return unlockWorkflowFactory.create(vault, owner).unlockWorkflow();
+				}, Platform::runLater) //
+				.thenCompose(CompletableFuture::runAsync) // run unlock in forkjoin pool TODO: use executorservice
+				.exceptionally(e -> {
+					showErrorWindow(e, owner == null ? primaryStage : owner, null);
+					return null;
+				});
+	}
+
+	public CompletionStage<Void> startLockWorkflow(Vault vault, @Nullable Stage owner) {
+		return CompletableFuture.supplyAsync(() -> {
+					Preconditions.checkState(vault.stateProperty().transition(VaultState.Value.LOCKED, VaultState.Value.PROCESSING), "Vault not unlocked.");
+					LOG.debug("Start lock workflow for {}", vault.getDisplayName());
+					return lockWorkflowFactory.create(vault, owner).lockWorkflow();
+				}, Platform::runLater) //
+				.thenCompose(CompletableFuture::runAsync) // run lock in forkjoin pool TODO: use executorservice
+				.exceptionally(e -> {
+					showErrorWindow(e, owner == null ? primaryStage : owner, null);
+					return null;
+				});
+	}
+
+	/**
+	 * Displays the generic error scene in the given window.
+	 *
+	 * @param cause The exception to show
+	 * @param window What window to display the scene in
+	 * @param previousScene To what scene to return to when pressing "back". Back button will be hidden, if <code>null</code>
+	 * @return A
+	 */
+	public CompletionStage<Stage> showErrorWindow(Throwable cause, Stage window, @Nullable Scene previousScene) {
+		return CompletableFuture.supplyAsync(() -> errorWindowFactory.create(cause, window, previousScene).show(), Platform::runLater);
+	}
+
+}
diff --git a/src/main/java/org/cryptomator/ui/fxapp/PrimaryStage.java b/src/main/java/org/cryptomator/ui/fxapp/PrimaryStage.java
new file mode 100644
index 00000000..e20b4352
--- /dev/null
+++ b/src/main/java/org/cryptomator/ui/fxapp/PrimaryStage.java
@@ -0,0 +1,14 @@
+package org.cryptomator.ui.fxapp;
+
+import javax.inject.Qualifier;
+import java.lang.annotation.Documented;
+import java.lang.annotation.Retention;
+
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
+
+@Qualifier
+@Documented
+@Retention(RUNTIME)
+public @interface PrimaryStage {
+
+}
diff --git a/src/main/java/org/cryptomator/ui/health/CheckListController.java b/src/main/java/org/cryptomator/ui/health/CheckListController.java
index 75ecdef5..22ec37b4 100644
--- a/src/main/java/org/cryptomator/ui/health/CheckListController.java
+++ b/src/main/java/org/cryptomator/ui/health/CheckListController.java
@@ -1,9 +1,8 @@
 package org.cryptomator.ui.health;
 
 import com.google.common.base.Preconditions;
-import dagger.Lazy;
-import org.cryptomator.ui.common.ErrorComponent;
 import org.cryptomator.ui.common.FxController;
+import org.cryptomator.ui.fxapp.FxApplicationWindows;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -15,9 +14,7 @@ import javafx.beans.property.ObjectProperty;
 import javafx.collections.FXCollections;
 import javafx.collections.ObservableList;
 import javafx.collections.transformation.FilteredList;
-import javafx.event.ActionEvent;
 import javafx.fxml.FXML;
-import javafx.scene.control.CheckBox;
 import javafx.scene.control.ListView;
 import javafx.scene.control.SelectionMode;
 import javafx.stage.Stage;
@@ -37,7 +34,7 @@ public class CheckListController implements FxController {
 	private final ObjectProperty<Check> selectedCheck;
 	private final BooleanBinding mainRunStarted; //TODO: rerunning not considered for now
 	private final BooleanBinding somethingsRunning;
-	private final Lazy<ErrorComponent.Builder> errorComponentBuilder;
+	private final FxApplicationWindows appWindows;
 	private final IntegerBinding chosenTaskCount;
 	private final BooleanBinding anyCheckSelected;
 	private final CheckListCellFactory listCellFactory;
@@ -46,7 +43,7 @@ public class CheckListController implements FxController {
 	public ListView<Check> checksListView;
 
 	@Inject
-	public CheckListController(@HealthCheckWindow Stage window, List<Check> checks, CheckExecutor checkExecutor, ReportWriter reportWriteTask, ObjectProperty<Check> selectedCheck, Lazy<ErrorComponent.Builder> errorComponentBuilder, CheckListCellFactory listCellFactory) {
+	public CheckListController(@HealthCheckWindow Stage window, List<Check> checks, CheckExecutor checkExecutor, ReportWriter reportWriteTask, ObjectProperty<Check> selectedCheck, FxApplicationWindows appWindows, CheckListCellFactory listCellFactory) {
 		this.window = window;
 		this.checks = FXCollections.observableList(checks, Check::observables);
 		this.checkExecutor = checkExecutor;
@@ -54,7 +51,7 @@ public class CheckListController implements FxController {
 		this.chosenChecks = this.checks.filtered(Check::isChosenForExecution);
 		this.reportWriter = reportWriteTask;
 		this.selectedCheck = selectedCheck;
-		this.errorComponentBuilder = errorComponentBuilder;
+		this.appWindows = appWindows;
 		this.chosenTaskCount = Bindings.size(this.chosenChecks);
 		this.mainRunStarted = Bindings.isEmpty(this.checks.filtered(c -> c.getState() == Check.CheckState.RUNNABLE));
 		this.somethingsRunning = Bindings.isNotEmpty(this.checks.filtered(c -> c.getState() == Check.CheckState.SCHEDULED || c.getState() == Check.CheckState.RUNNING));
@@ -104,7 +101,7 @@ public class CheckListController implements FxController {
 			reportWriter.writeReport(chosenChecks);
 		} catch (IOException e) {
 			LOG.error("Failed to write health check report.", e);
-			errorComponentBuilder.get().cause(e).window(window).returnToScene(window.getScene()).build().showErrorScene();
+			appWindows.showErrorWindow(e, window, window.getScene());
 		}
 	}
 
diff --git a/src/main/java/org/cryptomator/ui/health/StartController.java b/src/main/java/org/cryptomator/ui/health/StartController.java
index 44c3f3a8..fa41a7fd 100644
--- a/src/main/java/org/cryptomator/ui/health/StartController.java
+++ b/src/main/java/org/cryptomator/ui/health/StartController.java
@@ -7,10 +7,10 @@ import org.cryptomator.cryptofs.VaultConfig;
 import org.cryptomator.cryptofs.VaultConfigLoadException;
 import org.cryptomator.cryptofs.VaultKeyInvalidException;
 import org.cryptomator.cryptolib.api.Masterkey;
-import org.cryptomator.ui.common.ErrorComponent;
 import org.cryptomator.ui.common.FxController;
 import org.cryptomator.ui.common.FxmlFile;
 import org.cryptomator.ui.common.FxmlScene;
+import org.cryptomator.ui.fxapp.FxApplicationWindows;
 import org.cryptomator.ui.keyloading.KeyLoadingStrategy;
 import org.cryptomator.ui.unlock.UnlockCancelledException;
 import org.slf4j.Logger;
@@ -40,10 +40,10 @@ public class StartController implements FxController {
 	private final AtomicReference<Masterkey> masterkeyRef;
 	private final AtomicReference<VaultConfig> vaultConfigRef;
 	private final Lazy<Scene> checkScene;
-	private final Lazy<ErrorComponent.Builder> errorComponent;
+	private final FxApplicationWindows appWindows;
 
 	@Inject
-	public StartController(@HealthCheckWindow Stage window, @HealthCheckWindow Vault vault, @HealthCheckWindow KeyLoadingStrategy keyLoadingStrategy, ExecutorService executor, AtomicReference<Masterkey> masterkeyRef, AtomicReference<VaultConfig> vaultConfigRef, @FxmlScene(FxmlFile.HEALTH_CHECK_LIST) Lazy<Scene> checkScene, Lazy<ErrorComponent.Builder> errorComponent, @Named("unlockWindow") Stage unlockWindow) {
+	public StartController(@HealthCheckWindow Stage window, @HealthCheckWindow Vault vault, @HealthCheckWindow KeyLoadingStrategy keyLoadingStrategy, ExecutorService executor, AtomicReference<Masterkey> masterkeyRef, AtomicReference<VaultConfig> vaultConfigRef, @FxmlScene(FxmlFile.HEALTH_CHECK_LIST) Lazy<Scene> checkScene, FxApplicationWindows appWindows, @Named("unlockWindow") Stage unlockWindow) {
 		this.window = window;
 		this.unlockWindow = unlockWindow;
 		this.vaultConfig = vault.getVaultConfigCache();
@@ -52,7 +52,7 @@ public class StartController implements FxController {
 		this.masterkeyRef = masterkeyRef;
 		this.vaultConfigRef = vaultConfigRef;
 		this.checkScene = checkScene;
-		this.errorComponent = errorComponent;
+		this.appWindows = appWindows;
 	}
 
 	@FXML
@@ -106,10 +106,10 @@ public class StartController implements FxController {
 			// ok
 		} else if (e instanceof VaultKeyInvalidException) {
 			LOG.error("Invalid key"); //TODO: specific error screen
-			errorComponent.get().window(window).cause(e).build().showErrorScene();
+			appWindows.showErrorWindow(e, window, null);
 		} else {
 			LOG.error("Failed to load key.", e);
-			errorComponent.get().window(window).cause(e).build().showErrorScene();
+			appWindows.showErrorWindow(e, window, null);
 		}
 	}
 
diff --git a/src/main/java/org/cryptomator/ui/launcher/AppLaunchEvent.java b/src/main/java/org/cryptomator/ui/launcher/AppLaunchEvent.java
deleted file mode 100644
index 710c6d43..00000000
--- a/src/main/java/org/cryptomator/ui/launcher/AppLaunchEvent.java
+++ /dev/null
@@ -1,28 +0,0 @@
-package org.cryptomator.ui.launcher;
-
-import java.nio.file.Path;
-import java.util.Collection;
-
-public class AppLaunchEvent {
-
-	private final EventType type;
-	private final Collection<Path> pathsToOpen;
-
-	public enum EventType {
-		REVEAL_APP,
-		OPEN_FILE
-	}
-
-	public AppLaunchEvent(EventType type, Collection<Path> pathsToOpen) {
-		this.type = type;
-		this.pathsToOpen = pathsToOpen;
-	}
-
-	public EventType getType() {
-		return type;
-	}
-
-	public Collection<Path> getPathsToOpen() {
-		return pathsToOpen;
-	}
-}
diff --git a/src/main/java/org/cryptomator/ui/launcher/AppLifecycleListener.java b/src/main/java/org/cryptomator/ui/launcher/AppLifecycleListener.java
deleted file mode 100644
index 66b75840..00000000
--- a/src/main/java/org/cryptomator/ui/launcher/AppLifecycleListener.java
+++ /dev/null
@@ -1,146 +0,0 @@
-package org.cryptomator.ui.launcher;
-
-import org.cryptomator.common.ShutdownHook;
-import org.cryptomator.common.vaults.LockNotCompletedException;
-import org.cryptomator.common.vaults.Vault;
-import org.cryptomator.common.vaults.VaultState;
-import org.cryptomator.common.vaults.Volume;
-import org.cryptomator.ui.preferences.SelectedPreferencesTab;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import javax.inject.Inject;
-import javax.inject.Named;
-import javax.inject.Singleton;
-import javafx.application.Platform;
-import javafx.beans.Observable;
-import javafx.collections.ObservableList;
-import java.awt.Desktop;
-import java.awt.EventQueue;
-import java.awt.desktop.AboutEvent;
-import java.awt.desktop.QuitResponse;
-import java.awt.desktop.QuitStrategy;
-import java.util.EnumSet;
-import java.util.EventObject;
-import java.util.Set;
-import java.util.concurrent.CountDownLatch;
-import java.util.concurrent.atomic.AtomicBoolean;
-
-import static org.cryptomator.common.vaults.VaultState.Value.*;
-
-@Singleton
-public class AppLifecycleListener {
-
-	private static final Logger LOG = LoggerFactory.getLogger(AppLifecycleListener.class);
-	public static final Set<VaultState.Value> STATES_ALLOWING_TERMINATION = EnumSet.of(LOCKED, NEEDS_MIGRATION, MISSING, ERROR);
-
-	private final FxApplicationStarter fxApplicationStarter;
-	private final CountDownLatch shutdownLatch;
-	private final ObservableList<Vault> vaults;
-	private final AtomicBoolean allowQuitWithoutPrompt;
-
-	@Inject
-	AppLifecycleListener(FxApplicationStarter fxApplicationStarter, @Named("shutdownLatch") CountDownLatch shutdownLatch, ShutdownHook shutdownHook, ObservableList<Vault> vaults) {
-		this.fxApplicationStarter = fxApplicationStarter;
-		this.shutdownLatch = shutdownLatch;
-		this.vaults = vaults;
-		this.allowQuitWithoutPrompt = new AtomicBoolean(true);
-		vaults.addListener(this::vaultListChanged);
-
-		// register preferences shortcut
-		if (Desktop.getDesktop().isSupported(Desktop.Action.APP_PREFERENCES)) {
-			Desktop.getDesktop().setPreferencesHandler(this::showPreferencesWindow);
-		}
-
-		// register preferences shortcut
-		if (Desktop.getDesktop().isSupported(Desktop.Action.APP_ABOUT)) {
-			Desktop.getDesktop().setAboutHandler(this::showAboutWindow);
-		}
-
-		// register quit handler
-		if (Desktop.getDesktop().isSupported(Desktop.Action.APP_QUIT_HANDLER)) {
-			Desktop.getDesktop().setQuitHandler(this::handleQuitRequest);
-		}
-
-		// set quit strategy (cmd+q would call `System.exit(0)` otherwise)
-		if (Desktop.getDesktop().isSupported(Desktop.Action.APP_QUIT_STRATEGY)) {
-			Desktop.getDesktop().setQuitStrategy(QuitStrategy.CLOSE_ALL_WINDOWS);
-		}
-
-		shutdownHook.runOnShutdown(this::forceUnmountRemainingVaults);
-	}
-
-	/**
-	 * Gracefully terminates the application.
-	 */
-	public void quit() {
-		handleQuitRequest(null, new QuitResponse() {
-			@Override
-			public void performQuit() {
-				// no-op
-			}
-
-			@Override
-			public void cancelQuit() {
-				// no-op
-			}
-		});
-	}
-
-	private void handleQuitRequest(@SuppressWarnings("unused") EventObject e, QuitResponse response) {
-		QuitResponse decoratedQuitResponse = decorateQuitResponse(response);
-		if (allowQuitWithoutPrompt.get()) {
-			decoratedQuitResponse.performQuit();
-		} else {
-			fxApplicationStarter.get().thenAccept(app -> app.showQuitWindow(decoratedQuitResponse));
-		}
-	}
-
-	private QuitResponse decorateQuitResponse(QuitResponse originalQuitResponse) {
-		return new QuitResponse() {
-			@Override
-			public void performQuit() {
-				Platform.exit(); // will be no-op, if JavaFX never started.
-				shutdownLatch.countDown(); // main thread is waiting for this latch
-				originalQuitResponse.performQuit();
-			}
-
-			@Override
-			public void cancelQuit() {
-				originalQuitResponse.cancelQuit();
-			}
-		};
-	}
-
-	private void vaultListChanged(@SuppressWarnings("unused") Observable observable) {
-		assert Platform.isFxApplicationThread();
-		boolean allVaultsAllowTermination = vaults.stream().map(Vault::getState).allMatch(STATES_ALLOWING_TERMINATION::contains);
-		boolean suddenTerminationChanged = allowQuitWithoutPrompt.compareAndSet(!allVaultsAllowTermination, allVaultsAllowTermination);
-		if (suddenTerminationChanged) {
-			LOG.debug("Allow quitting without prompt: {}", allVaultsAllowTermination);
-		}
-	}
-
-	private void showPreferencesWindow(@SuppressWarnings("unused") EventObject actionEvent) {
-		fxApplicationStarter.get().thenAccept(app -> app.showPreferencesWindow(SelectedPreferencesTab.ANY));
-	}
-
-	private void showAboutWindow(@SuppressWarnings("unused") AboutEvent aboutEvent) {
-		fxApplicationStarter.get().thenAccept(app -> app.showPreferencesWindow(SelectedPreferencesTab.ABOUT));
-	}
-
-	private void forceUnmountRemainingVaults() {
-		for (Vault vault : vaults) {
-			if (vault.isUnlocked()) {
-				try {
-					vault.lock(true);
-				} catch (Volume.VolumeException e) {
-					LOG.error("Failed to unmount vault " + vault.getPath(), e);
-				} catch (LockNotCompletedException e) {
-					LOG.error("Failed to lock vault " + vault.getPath(), e);
-				}
-			}
-		}
-	}
-
-}
diff --git a/src/main/java/org/cryptomator/ui/launcher/FxApplicationStarter.java b/src/main/java/org/cryptomator/ui/launcher/FxApplicationStarter.java
deleted file mode 100644
index 32f41185..00000000
--- a/src/main/java/org/cryptomator/ui/launcher/FxApplicationStarter.java
+++ /dev/null
@@ -1,75 +0,0 @@
-package org.cryptomator.ui.launcher;
-
-import com.google.common.base.Preconditions;
-import org.cryptomator.ui.fxapp.FxApplication;
-import org.cryptomator.ui.fxapp.FxApplicationComponent;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import javax.inject.Inject;
-import javax.inject.Singleton;
-import javafx.application.Application;
-import javafx.stage.Stage;
-import javafx.stage.StageStyle;
-import java.lang.ref.WeakReference;
-import java.util.Objects;
-import java.util.concurrent.CompletableFuture;
-import java.util.concurrent.CompletionStage;
-import java.util.concurrent.ExecutorService;
-import java.util.concurrent.atomic.AtomicBoolean;
-import java.util.concurrent.atomic.AtomicReference;
-
-@Singleton
-public class FxApplicationStarter {
-
-	private static final Logger LOG = LoggerFactory.getLogger(FxApplicationStarter.class);
-	private static final AtomicReference<FxApplicationComponent.Builder> FX_APP_COMP_BUILDER = new AtomicReference<>();
-	private static final CompletableFuture<FxApplication> FUTURE = new CompletableFuture<>();
-
-	private final ExecutorService executor;
-	private final AtomicBoolean started;
-
-	@Inject
-	public FxApplicationStarter(FxApplicationComponent.Builder fxAppCompBuilder, ExecutorService executor) {
-		FX_APP_COMP_BUILDER.set(fxAppCompBuilder);
-		this.executor = executor;
-		this.started = new AtomicBoolean();
-	}
-
-	public CompletionStage<FxApplication> get() {
-		if (!started.getAndSet(true)) {
-			start();
-		}
-		return FUTURE;
-	}
-
-	private void start() {
-		executor.submit(() -> {
-			LOG.debug("Starting JavaFX runtime...");
-			Application.launch(CryptomatorGui.class);
-		});
-	}
-
-	public static class CryptomatorGui extends Application {
-
-		@Override
-		public void start(Stage primaryStage) throws Exception {
-			var builder = Objects.requireNonNull(FX_APP_COMP_BUILDER.get()); // TODO add message?
-
-			// set defaults for primary stage:
-			// TODO: invoke StageFactory stuff...
-			primaryStage.setTitle("Cryptomator");
-			primaryStage.initStyle(StageStyle.UNDECORATED);
-			primaryStage.setMinWidth(650);
-			primaryStage.setMinHeight(440);
-
-			// build subcomponent
-			var comp = builder.mainWindow(primaryStage).fxApplication(this).build();
-
-			// call delegate
-			var app = comp.application();
-			app.start();
-			FUTURE.complete(app);
-		}
-	}
-}
diff --git a/src/main/java/org/cryptomator/ui/launcher/UiLauncher.java b/src/main/java/org/cryptomator/ui/launcher/UiLauncher.java
deleted file mode 100644
index 08461a56..00000000
--- a/src/main/java/org/cryptomator/ui/launcher/UiLauncher.java
+++ /dev/null
@@ -1,90 +0,0 @@
-package org.cryptomator.ui.launcher;
-
-import dagger.Lazy;
-import org.cryptomator.common.settings.Settings;
-import org.cryptomator.common.vaults.Vault;
-import org.cryptomator.integrations.tray.TrayIntegrationProvider;
-import org.cryptomator.ui.fxapp.FxApplication;
-import org.cryptomator.ui.traymenu.TrayMenuComponent;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import javax.inject.Inject;
-import javax.inject.Singleton;
-import javafx.collections.ObservableList;
-import java.awt.Desktop;
-import java.awt.SystemTray;
-import java.awt.desktop.AppReopenedListener;
-import java.util.Collection;
-import java.util.Optional;
-
-@Singleton
-public class UiLauncher {
-
-	private static final Logger LOG = LoggerFactory.getLogger(UiLauncher.class);
-
-	private final Settings settings;
-	private final ObservableList<Vault> vaults;
-	private final Lazy<TrayMenuComponent> trayMenu;
-	private final FxApplicationStarter fxApplicationStarter;
-	private final AppLaunchEventHandler launchEventHandler;
-	private final Optional<TrayIntegrationProvider> trayIntegration;
-
-	@Inject
-	public UiLauncher(Settings settings, ObservableList<Vault> vaults, Lazy<TrayMenuComponent> trayMenu, FxApplicationStarter fxApplicationStarter, AppLaunchEventHandler launchEventHandler, Optional<TrayIntegrationProvider> trayIntegration) {
-		this.settings = settings;
-		this.vaults = vaults;
-		this.trayMenu = trayMenu;
-		this.fxApplicationStarter = fxApplicationStarter;
-		this.launchEventHandler = launchEventHandler;
-		this.trayIntegration = trayIntegration;
-	}
-
-	public void launch() {
-		boolean hidden = settings.startHidden().get();
-		if (SystemTray.isSupported() && settings.showTrayIcon().get()) {
-			trayMenu.get().initializeTrayIcon();
-			launch(true, hidden);
-		} else {
-			launch(false, hidden);
-		}
-	}
-
-	private void launch(boolean withTrayIcon, boolean hidden) {
-		// start hidden, minimized or normal?
-		if (withTrayIcon && hidden) {
-			LOG.debug("Hiding application...");
-			trayIntegration.ifPresent(TrayIntegrationProvider::minimizedToTray);
-		} else if (!withTrayIcon && hidden) {
-			LOG.debug("Minimizing application...");
-			showMainWindowAsync(true);
-		} else {
-			LOG.debug("Showing application...");
-			showMainWindowAsync(false);
-		}
-
-		// register app reopen listener
-		Desktop.getDesktop().addAppEventListener((AppReopenedListener) e -> showMainWindowAsync(false));
-
-		// auto unlock
-		Collection<Vault> vaultsToAutoUnlock = vaults.filtered(this::shouldAttemptAutoUnlock);
-		if (!vaultsToAutoUnlock.isEmpty()) {
-			fxApplicationStarter.get().thenAccept(app -> {
-				for (Vault vault : vaultsToAutoUnlock) {
-					app.startUnlockWorkflow(vault, Optional.empty());
-				}
-			});
-		}
-
-		launchEventHandler.startHandlingLaunchEvents();
-	}
-
-	private boolean shouldAttemptAutoUnlock(Vault vault) {
-		return vault.isLocked() && vault.getVaultSettings().unlockAfterStartup().get();
-	}
-
-	private void showMainWindowAsync(boolean minimize) {
-		fxApplicationStarter.get().thenCompose(FxApplication::showMainWindow).thenAccept(win -> win.setIconified(minimize));
-	}
-
-}
diff --git a/src/main/java/org/cryptomator/ui/launcher/UiLauncherModule.java b/src/main/java/org/cryptomator/ui/launcher/UiLauncherModule.java
deleted file mode 100644
index fa4631af..00000000
--- a/src/main/java/org/cryptomator/ui/launcher/UiLauncherModule.java
+++ /dev/null
@@ -1,61 +0,0 @@
-package org.cryptomator.ui.launcher;
-
-import dagger.Module;
-import dagger.Provides;
-import org.cryptomator.common.PluginClassLoader;
-import org.cryptomator.integrations.autostart.AutoStartProvider;
-import org.cryptomator.integrations.tray.TrayIntegrationProvider;
-import org.cryptomator.integrations.uiappearance.UiAppearanceProvider;
-import org.cryptomator.ui.fxapp.FxApplicationComponent;
-import org.cryptomator.ui.traymenu.TrayMenuComponent;
-
-import javax.inject.Named;
-import javax.inject.Singleton;
-import java.util.Optional;
-import java.util.ResourceBundle;
-import java.util.ServiceLoader;
-import java.util.concurrent.ArrayBlockingQueue;
-import java.util.concurrent.BlockingQueue;
-
-@Module(subcomponents = {TrayMenuComponent.class, FxApplicationComponent.class})
-public abstract class UiLauncherModule {
-
-	@Provides
-	@Singleton
-	static TrayMenuComponent provideTrayMenuComponent(TrayMenuComponent.Builder builder) {
-		return builder.build();
-	}
-
-	@Provides
-	@Singleton
-	static Optional<UiAppearanceProvider> provideAppearanceProvider(PluginClassLoader classLoader) {
-		return ServiceLoader.load(UiAppearanceProvider.class, classLoader).findFirst();
-	}
-
-	@Provides
-	@Singleton
-	static Optional<AutoStartProvider> provideAutostartProvider(PluginClassLoader classLoader) {
-		return ServiceLoader.load(AutoStartProvider.class, classLoader).findFirst();
-	}
-
-
-	@Provides
-	@Singleton
-	static Optional<TrayIntegrationProvider> provideTrayIntegrationProvider(PluginClassLoader classLoader) {
-		return ServiceLoader.load(TrayIntegrationProvider.class, classLoader).findFirst();
-	}
-
-	@Provides
-	@Singleton
-	static ResourceBundle provideLocalization() {
-		return ResourceBundle.getBundle("i18n.strings");
-	}
-
-	@Provides
-	@Singleton
-	@Named("launchEventQueue")
-	static BlockingQueue<AppLaunchEvent> provideFileOpenRequests() {
-		return new ArrayBlockingQueue<>(10);
-	}
-
-}
diff --git a/src/main/java/org/cryptomator/ui/lock/LockComponent.java b/src/main/java/org/cryptomator/ui/lock/LockComponent.java
index 9796c88c..eda81f7f 100644
--- a/src/main/java/org/cryptomator/ui/lock/LockComponent.java
+++ b/src/main/java/org/cryptomator/ui/lock/LockComponent.java
@@ -2,11 +2,11 @@ package org.cryptomator.ui.lock;
 
 import dagger.BindsInstance;
 import dagger.Subcomponent;
+import org.cryptomator.common.Nullable;
 import org.cryptomator.common.vaults.Vault;
 
 import javax.inject.Named;
 import javafx.stage.Stage;
-import java.util.Optional;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Future;
 
@@ -25,15 +25,9 @@ public interface LockComponent {
 		return workflow;
 	}
 
-	@Subcomponent.Builder
-	interface Builder {
-
-		@BindsInstance
-		LockComponent.Builder vault(@LockWindow Vault vault);
-
-		@BindsInstance
-		LockComponent.Builder owner(@Named("lockWindowOwner") Optional<Stage> owner);
-
-		LockComponent build();
+	@Subcomponent.Factory
+	interface Factory {
+		LockComponent create(@BindsInstance @LockWindow Vault vault, @BindsInstance @Named("lockWindowOwner") @Nullable Stage owner);
 	}
+
 }
diff --git a/src/main/java/org/cryptomator/ui/lock/LockModule.java b/src/main/java/org/cryptomator/ui/lock/LockModule.java
index ddee13df..6a82f2ba 100644
--- a/src/main/java/org/cryptomator/ui/lock/LockModule.java
+++ b/src/main/java/org/cryptomator/ui/lock/LockModule.java
@@ -12,6 +12,7 @@ import org.cryptomator.ui.common.FxmlFile;
 import org.cryptomator.ui.common.FxmlLoaderFactory;
 import org.cryptomator.ui.common.FxmlScene;
 import org.cryptomator.ui.common.StageFactory;
+import org.jetbrains.annotations.Nullable;
 
 import javax.inject.Named;
 import javax.inject.Provider;
@@ -43,12 +44,12 @@ abstract class LockModule {
 	@Provides
 	@LockWindow
 	@LockScoped
-	static Stage provideWindow(StageFactory factory, @LockWindow Vault vault, @Named("lockWindowOwner") Optional<Stage> owner) {
+	static Stage provideWindow(StageFactory factory, @LockWindow Vault vault, @Nullable @Named("lockWindowOwner") Stage owner) {
 		Stage stage = factory.create();
 		stage.setTitle(vault.getDisplayName());
 		stage.setResizable(false);
-		if (owner.isPresent()) {
-			stage.initOwner(owner.get());
+		if (owner != null) {
+			stage.initOwner(owner);
 			stage.initModality(Modality.WINDOW_MODAL);
 		} else {
 			stage.initModality(Modality.APPLICATION_MODAL);
diff --git a/src/main/java/org/cryptomator/ui/lock/LockWorkflow.java b/src/main/java/org/cryptomator/ui/lock/LockWorkflow.java
index 1e05ceb7..2d4961dd 100644
--- a/src/main/java/org/cryptomator/ui/lock/LockWorkflow.java
+++ b/src/main/java/org/cryptomator/ui/lock/LockWorkflow.java
@@ -5,9 +5,9 @@ import org.cryptomator.common.vaults.LockNotCompletedException;
 import org.cryptomator.common.vaults.Vault;
 import org.cryptomator.common.vaults.VaultState;
 import org.cryptomator.common.vaults.Volume;
-import org.cryptomator.ui.common.ErrorComponent;
 import org.cryptomator.ui.common.FxmlFile;
 import org.cryptomator.ui.common.FxmlScene;
+import org.cryptomator.ui.fxapp.FxApplicationWindows;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -40,16 +40,16 @@ public class LockWorkflow extends Task<Void> {
 	private final AtomicReference<CompletableFuture<Boolean>> forceRetryDecision;
 	private final Lazy<Scene> lockForcedScene;
 	private final Lazy<Scene> lockFailedScene;
-	private final ErrorComponent.Builder errorComponent;
+	private final FxApplicationWindows appWindows;
 
 	@Inject
-	public LockWorkflow(@LockWindow Stage lockWindow, @LockWindow Vault vault, AtomicReference<CompletableFuture<Boolean>> forceRetryDecision, @FxmlScene(FxmlFile.LOCK_FORCED) Lazy<Scene> lockForcedScene, @FxmlScene(FxmlFile.LOCK_FAILED) Lazy<Scene> lockFailedScene, ErrorComponent.Builder errorComponent) {
+	public LockWorkflow(@LockWindow Stage lockWindow, @LockWindow Vault vault, AtomicReference<CompletableFuture<Boolean>> forceRetryDecision, @FxmlScene(FxmlFile.LOCK_FORCED) Lazy<Scene> lockForcedScene, @FxmlScene(FxmlFile.LOCK_FAILED) Lazy<Scene> lockFailedScene, FxApplicationWindows appWindows) {
 		this.lockWindow = lockWindow;
 		this.vault = vault;
 		this.forceRetryDecision = forceRetryDecision;
 		this.lockForcedScene = lockForcedScene;
 		this.lockFailedScene = lockFailedScene;
-		this.errorComponent = errorComponent;
+		this.appWindows = appWindows;
 	}
 
 	@Override
@@ -109,7 +109,7 @@ public class LockWorkflow extends Task<Void> {
 			lockWindow.setScene(lockFailedScene.get());
 			lockWindow.show();
 		} else {
-			errorComponent.cause(throwable).window(lockWindow).build().showErrorScene();
+			appWindows.showErrorWindow(throwable, lockWindow, null);
 		}
 	}
 
diff --git a/src/main/java/org/cryptomator/ui/mainwindow/MainWindow.java b/src/main/java/org/cryptomator/ui/mainwindow/MainWindow.java
index 51143e1f..22f3616e 100644
--- a/src/main/java/org/cryptomator/ui/mainwindow/MainWindow.java
+++ b/src/main/java/org/cryptomator/ui/mainwindow/MainWindow.java
@@ -9,6 +9,6 @@ import static java.lang.annotation.RetentionPolicy.RUNTIME;
 @Qualifier
 @Documented
 @Retention(RUNTIME)
-public @interface MainWindow {
+@interface MainWindow {
 
 }
diff --git a/src/main/java/org/cryptomator/ui/mainwindow/MainWindowModule.java b/src/main/java/org/cryptomator/ui/mainwindow/MainWindowModule.java
index f9372ba0..fb65b470 100644
--- a/src/main/java/org/cryptomator/ui/mainwindow/MainWindowModule.java
+++ b/src/main/java/org/cryptomator/ui/mainwindow/MainWindowModule.java
@@ -13,6 +13,7 @@ import org.cryptomator.ui.common.FxmlFile;
 import org.cryptomator.ui.common.FxmlLoaderFactory;
 import org.cryptomator.ui.common.FxmlScene;
 import org.cryptomator.ui.common.StageFactory;
+import org.cryptomator.ui.fxapp.PrimaryStage;
 import org.cryptomator.ui.health.HealthCheckComponent;
 import org.cryptomator.ui.migration.MigrationComponent;
 import org.cryptomator.ui.removevault.RemoveVaultComponent;
@@ -34,6 +35,11 @@ import java.util.ResourceBundle;
 @Module(subcomponents = {AddVaultWizardComponent.class, HealthCheckComponent.class, MigrationComponent.class, RemoveVaultComponent.class, VaultOptionsComponent.class, VaultStatisticsComponent.class, WrongFileAlertComponent.class, ErrorComponent.class})
 abstract class MainWindowModule {
 
+	@Binds
+	@MainWindow
+	@MainWindowScoped
+	abstract Stage bindMainWindow(@PrimaryStage Stage primaryStage);
+
 	@Provides
 	@MainWindowScoped
 	static ObjectProperty<Vault> provideSelectedVault() {
diff --git a/src/main/java/org/cryptomator/ui/mainwindow/MainWindowTitleController.java b/src/main/java/org/cryptomator/ui/mainwindow/MainWindowTitleController.java
index c8107415..c13e4417 100644
--- a/src/main/java/org/cryptomator/ui/mainwindow/MainWindowTitleController.java
+++ b/src/main/java/org/cryptomator/ui/mainwindow/MainWindowTitleController.java
@@ -4,8 +4,9 @@ import org.cryptomator.common.LicenseHolder;
 import org.cryptomator.common.settings.Settings;
 import org.cryptomator.ui.common.FxController;
 import org.cryptomator.ui.fxapp.FxApplication;
+import org.cryptomator.ui.fxapp.FxApplicationTerminator;
+import org.cryptomator.ui.fxapp.FxApplicationWindows;
 import org.cryptomator.ui.fxapp.UpdateChecker;
-import org.cryptomator.ui.launcher.AppLifecycleListener;
 import org.cryptomator.ui.preferences.SelectedPreferencesTab;
 import org.cryptomator.ui.traymenu.TrayMenuComponent;
 import org.slf4j.Logger;
@@ -25,9 +26,9 @@ public class MainWindowTitleController implements FxController {
 
 	private static final Logger LOG = LoggerFactory.getLogger(MainWindowTitleController.class);
 
-	private final AppLifecycleListener appLifecycle;
 	private final Stage window;
-	private final FxApplication application;
+	private final FxApplicationTerminator terminator;
+	private final FxApplicationWindows appWindows;
 	private final boolean trayMenuInitialized;
 	private final UpdateChecker updateChecker;
 	private final BooleanBinding updateAvailable;
@@ -40,10 +41,10 @@ public class MainWindowTitleController implements FxController {
 	private double yOffset;
 
 	@Inject
-	MainWindowTitleController(AppLifecycleListener appLifecycle, @MainWindow Stage window, FxApplication application, TrayMenuComponent trayMenu, UpdateChecker updateChecker, LicenseHolder licenseHolder, Settings settings) {
-		this.appLifecycle = appLifecycle;
+	MainWindowTitleController(@MainWindow Stage window, FxApplicationTerminator terminator, FxApplicationWindows appWindows, TrayMenuComponent trayMenu, UpdateChecker updateChecker, LicenseHolder licenseHolder, Settings settings) {
 		this.window = window;
-		this.application = application;
+		this.terminator = terminator;
+		this.appWindows = appWindows;
 		this.trayMenuInitialized = trayMenu.isInitialized();
 		this.updateChecker = updateChecker;
 		this.updateAvailable = updateChecker.latestVersionProperty().isNotNull();
@@ -96,7 +97,7 @@ public class MainWindowTitleController implements FxController {
 		if (trayMenuInitialized) {
 			window.close();
 		} else {
-			appLifecycle.quit();
+			terminator.terminate();
 		}
 	}
 
@@ -107,17 +108,17 @@ public class MainWindowTitleController implements FxController {
 
 	@FXML
 	public void showPreferences() {
-		application.showPreferencesWindow(SelectedPreferencesTab.ANY);
+		appWindows.showPreferencesWindow(SelectedPreferencesTab.ANY);
 	}
 
 	@FXML
 	public void showGeneralPreferences() {
-		application.showPreferencesWindow(SelectedPreferencesTab.GENERAL);
+		appWindows.showPreferencesWindow(SelectedPreferencesTab.GENERAL);
 	}
 
 	@FXML
 	public void showDonationKeyPreferences() {
-		application.showPreferencesWindow(SelectedPreferencesTab.CONTRIBUTE);
+		appWindows.showPreferencesWindow(SelectedPreferencesTab.CONTRIBUTE);
 	}
 
 	/* Getter/Setter */
diff --git a/src/main/java/org/cryptomator/ui/mainwindow/VaultDetailLockedController.java b/src/main/java/org/cryptomator/ui/mainwindow/VaultDetailLockedController.java
index 5fee2e6d..af550b73 100644
--- a/src/main/java/org/cryptomator/ui/mainwindow/VaultDetailLockedController.java
+++ b/src/main/java/org/cryptomator/ui/mainwindow/VaultDetailLockedController.java
@@ -5,6 +5,7 @@ import org.cryptomator.common.keychain.KeychainManager;
 import org.cryptomator.common.vaults.Vault;
 import org.cryptomator.ui.common.FxController;
 import org.cryptomator.ui.fxapp.FxApplication;
+import org.cryptomator.ui.fxapp.FxApplicationWindows;
 import org.cryptomator.ui.health.HealthCheckComponent;
 import org.cryptomator.ui.vaultoptions.SelectedVaultOptionsTab;
 import org.cryptomator.ui.vaultoptions.VaultOptionsComponent;
@@ -23,16 +24,16 @@ import java.util.Optional;
 public class VaultDetailLockedController implements FxController {
 
 	private final ReadOnlyObjectProperty<Vault> vault;
-	private final FxApplication application;
+	private final FxApplicationWindows appWindows;
 	private final VaultOptionsComponent.Builder vaultOptionsWindow;
 	private final KeychainManager keychain;
 	private final Stage mainWindow;
 	private final BooleanExpression passwordSaved;
 
 	@Inject
-	VaultDetailLockedController(ObjectProperty<Vault> vault, FxApplication application,  VaultOptionsComponent.Builder vaultOptionsWindow, KeychainManager keychain, @MainWindow Stage mainWindow) {
+	VaultDetailLockedController(ObjectProperty<Vault> vault, FxApplicationWindows appWindows,  VaultOptionsComponent.Builder vaultOptionsWindow, KeychainManager keychain, @MainWindow Stage mainWindow) {
 		this.vault = vault;
-		this.application = application;
+		this.appWindows = appWindows;
 		this.vaultOptionsWindow = vaultOptionsWindow;
 		this.keychain = keychain;
 		this.mainWindow = mainWindow;
@@ -45,7 +46,7 @@ public class VaultDetailLockedController implements FxController {
 
 	@FXML
 	public void unlock() {
-		application.startUnlockWorkflow(vault.get(), Optional.of(mainWindow));
+		appWindows.startUnlockWorkflow(vault.get(), mainWindow);
 	}
 
 	@FXML
diff --git a/src/main/java/org/cryptomator/ui/mainwindow/VaultDetailUnknownErrorController.java b/src/main/java/org/cryptomator/ui/mainwindow/VaultDetailUnknownErrorController.java
index 22365da7..6e40d54b 100644
--- a/src/main/java/org/cryptomator/ui/mainwindow/VaultDetailUnknownErrorController.java
+++ b/src/main/java/org/cryptomator/ui/mainwindow/VaultDetailUnknownErrorController.java
@@ -1,15 +1,13 @@
 package org.cryptomator.ui.mainwindow;
 
-import com.tobiasdiez.easybind.EasyBind;
 import org.cryptomator.common.vaults.Vault;
 import org.cryptomator.common.vaults.VaultListManager;
-import org.cryptomator.ui.common.ErrorComponent;
 import org.cryptomator.ui.common.FxController;
+import org.cryptomator.ui.fxapp.FxApplicationWindows;
 import org.cryptomator.ui.removevault.RemoveVaultComponent;
 
 import javax.inject.Inject;
 import javax.inject.Named;
-import javafx.beans.binding.Binding;
 import javafx.beans.property.ObjectProperty;
 import javafx.fxml.FXML;
 import javafx.stage.Stage;
@@ -18,21 +16,21 @@ import javafx.stage.Stage;
 public class VaultDetailUnknownErrorController implements FxController {
 
 	private final ObjectProperty<Vault> vault;
-	private final ErrorComponent.Builder errorComponentBuilder;
+	private final FxApplicationWindows appWindows;
 	private final Stage errorWindow;
 	private final RemoveVaultComponent.Builder removeVault;
 
 	@Inject
-	public VaultDetailUnknownErrorController(ObjectProperty<Vault> vault, ErrorComponent.Builder errorComponentBuilder, @Named("errorWindow") Stage errorWindow, RemoveVaultComponent.Builder removeVault) {
+	public VaultDetailUnknownErrorController(ObjectProperty<Vault> vault, FxApplicationWindows appWindows, @Named("errorWindow") Stage errorWindow, RemoveVaultComponent.Builder removeVault) {
 		this.vault = vault;
-		this.errorComponentBuilder = errorComponentBuilder;
+		this.appWindows = appWindows;
 		this.errorWindow = errorWindow;
 		this.removeVault = removeVault;
 	}
 
 	@FXML
 	public void showError() {
-		errorComponentBuilder.window(errorWindow).cause(vault.get().getLastKnownException()).build().showErrorScene();
+		appWindows.showErrorWindow(vault.get().getLastKnownException(), errorWindow, null);
 	}
 
 	@FXML
diff --git a/src/main/java/org/cryptomator/ui/mainwindow/VaultDetailUnlockedController.java b/src/main/java/org/cryptomator/ui/mainwindow/VaultDetailUnlockedController.java
index 0af909bb..63d88a6a 100644
--- a/src/main/java/org/cryptomator/ui/mainwindow/VaultDetailUnlockedController.java
+++ b/src/main/java/org/cryptomator/ui/mainwindow/VaultDetailUnlockedController.java
@@ -6,7 +6,7 @@ import com.google.common.cache.LoadingCache;
 import org.cryptomator.common.vaults.Vault;
 import org.cryptomator.ui.common.FxController;
 import org.cryptomator.ui.common.VaultService;
-import org.cryptomator.ui.fxapp.FxApplication;
+import org.cryptomator.ui.fxapp.FxApplicationWindows;
 import org.cryptomator.ui.stats.VaultStatisticsComponent;
 
 import javax.inject.Inject;
@@ -14,22 +14,21 @@ import javafx.beans.property.ObjectProperty;
 import javafx.beans.property.ReadOnlyObjectProperty;
 import javafx.fxml.FXML;
 import javafx.stage.Stage;
-import java.util.Optional;
 
 @MainWindowScoped
 public class VaultDetailUnlockedController implements FxController {
 
 	private final ReadOnlyObjectProperty<Vault> vault;
-	private final FxApplication application;
+	private final FxApplicationWindows appWindows;
 	private final VaultService vaultService;
 	private final Stage mainWindow;
 	private final LoadingCache<Vault, VaultStatisticsComponent> vaultStats;
 	private final VaultStatisticsComponent.Builder vaultStatsBuilder;
 
 	@Inject
-	public VaultDetailUnlockedController(ObjectProperty<Vault> vault, FxApplication application, VaultService vaultService, VaultStatisticsComponent.Builder vaultStatsBuilder, @MainWindow Stage mainWindow) {
+	public VaultDetailUnlockedController(ObjectProperty<Vault> vault, FxApplicationWindows appWindows, VaultService vaultService, VaultStatisticsComponent.Builder vaultStatsBuilder, @MainWindow Stage mainWindow) {
 		this.vault = vault;
-		this.application = application;
+		this.appWindows = appWindows;
 		this.vaultService = vaultService;
 		this.mainWindow = mainWindow;
 		this.vaultStats = CacheBuilder.newBuilder().weakValues().build(CacheLoader.from(this::buildVaultStats));
@@ -47,7 +46,7 @@ public class VaultDetailUnlockedController implements FxController {
 
 	@FXML
 	public void lock() {
-		application.startLockWorkflow(vault.get(), Optional.of(mainWindow));
+		appWindows.startLockWorkflow(vault.get(), mainWindow);
 	}
 
 	@FXML
diff --git a/src/main/java/org/cryptomator/ui/mainwindow/VaultListContextMenuController.java b/src/main/java/org/cryptomator/ui/mainwindow/VaultListContextMenuController.java
index 145618fa..c9d788b9 100644
--- a/src/main/java/org/cryptomator/ui/mainwindow/VaultListContextMenuController.java
+++ b/src/main/java/org/cryptomator/ui/mainwindow/VaultListContextMenuController.java
@@ -7,7 +7,8 @@ import org.cryptomator.common.keychain.KeychainManager;
 import org.cryptomator.common.vaults.Vault;
 import org.cryptomator.common.vaults.VaultState;
 import org.cryptomator.ui.common.FxController;
-import org.cryptomator.ui.fxapp.FxApplication;
+import org.cryptomator.ui.common.VaultService;
+import org.cryptomator.ui.fxapp.FxApplicationWindows;
 import org.cryptomator.ui.removevault.RemoveVaultComponent;
 import org.cryptomator.ui.vaultoptions.SelectedVaultOptionsTab;
 import org.cryptomator.ui.vaultoptions.VaultOptionsComponent;
@@ -18,7 +19,6 @@ import javafx.beans.property.ObjectProperty;
 import javafx.fxml.FXML;
 import javafx.stage.Stage;
 import java.util.EnumSet;
-import java.util.Optional;
 
 import static org.cryptomator.common.vaults.VaultState.Value.*;
 
@@ -27,7 +27,8 @@ public class VaultListContextMenuController implements FxController {
 
 	private final ObservableOptionalValue<Vault> selectedVault;
 	private final Stage mainWindow;
-	private final FxApplication application;
+	private final FxApplicationWindows appWindows;
+	private final VaultService vaultService;
 	private final KeychainManager keychain;
 	private final RemoveVaultComponent.Builder removeVault;
 	private final VaultOptionsComponent.Builder vaultOptionsWindow;
@@ -38,10 +39,11 @@ public class VaultListContextMenuController implements FxController {
 	private final Binding<Boolean> selectedVaultLockable;
 
 	@Inject
-	VaultListContextMenuController(ObjectProperty<Vault> selectedVault, @MainWindow Stage mainWindow, FxApplication application, KeychainManager keychain, RemoveVaultComponent.Builder removeVault, VaultOptionsComponent.Builder vaultOptionsWindow) {
+	VaultListContextMenuController(ObjectProperty<Vault> selectedVault, @MainWindow Stage mainWindow, FxApplicationWindows appWindows, VaultService vaultService, KeychainManager keychain, RemoveVaultComponent.Builder removeVault, VaultOptionsComponent.Builder vaultOptionsWindow) {
 		this.selectedVault = EasyBind.wrapNullable(selectedVault);
 		this.mainWindow = mainWindow;
-		this.application = application;
+		this.appWindows = appWindows;
+		this.vaultService = vaultService;
 		this.keychain = keychain;
 		this.removeVault = removeVault;
 		this.vaultOptionsWindow = vaultOptionsWindow;
@@ -74,22 +76,20 @@ public class VaultListContextMenuController implements FxController {
 	@FXML
 	public void didClickUnlockVault() {
 		selectedVault.ifValuePresent(v -> {
-			application.startUnlockWorkflow(v, Optional.of(mainWindow));
+			appWindows.startUnlockWorkflow(v, mainWindow);
 		});
 	}
 
 	@FXML
 	public void didClickLockVault() {
 		selectedVault.ifValuePresent(v -> {
-			application.startLockWorkflow(v, Optional.of(mainWindow));
+			appWindows.startLockWorkflow(v, mainWindow);
 		});
 	}
 
 	@FXML
 	public void didClickRevealVault() {
-		selectedVault.ifValuePresent(v -> {
-			application.getVaultService().reveal(v);
-		});
+		selectedVault.ifValuePresent(vaultService::reveal);
 	}
 
 	// Getter and Setter
diff --git a/src/main/java/org/cryptomator/ui/migration/MigrationModule.java b/src/main/java/org/cryptomator/ui/migration/MigrationModule.java
index 44f6960b..76f6ac16 100644
--- a/src/main/java/org/cryptomator/ui/migration/MigrationModule.java
+++ b/src/main/java/org/cryptomator/ui/migration/MigrationModule.java
@@ -6,13 +6,13 @@ import dagger.Provides;
 import dagger.multibindings.IntoMap;
 import org.cryptomator.cryptofs.common.FileSystemCapabilityChecker;
 import org.cryptomator.ui.common.DefaultSceneFactory;
-import org.cryptomator.ui.common.FxmlLoaderFactory;
 import org.cryptomator.ui.common.FxController;
 import org.cryptomator.ui.common.FxControllerKey;
 import org.cryptomator.ui.common.FxmlFile;
+import org.cryptomator.ui.common.FxmlLoaderFactory;
 import org.cryptomator.ui.common.FxmlScene;
 import org.cryptomator.ui.common.StageFactory;
-import org.cryptomator.ui.mainwindow.MainWindow;
+import org.cryptomator.ui.fxapp.PrimaryStage;
 
 import javax.inject.Named;
 import javax.inject.Provider;
@@ -37,7 +37,7 @@ abstract class MigrationModule {
 	@Provides
 	@MigrationWindow
 	@MigrationScoped
-	static Stage provideStage(StageFactory factory, @MainWindow Stage owner, ResourceBundle resourceBundle) {
+	static Stage provideStage(StageFactory factory, @PrimaryStage Stage owner, ResourceBundle resourceBundle) {
 		Stage stage = factory.create();
 		stage.setTitle(resourceBundle.getString("migration.title"));
 		stage.setResizable(false);
diff --git a/src/main/java/org/cryptomator/ui/migration/MigrationRunController.java b/src/main/java/org/cryptomator/ui/migration/MigrationRunController.java
index 503814b2..c6845652 100644
--- a/src/main/java/org/cryptomator/ui/migration/MigrationRunController.java
+++ b/src/main/java/org/cryptomator/ui/migration/MigrationRunController.java
@@ -12,12 +12,12 @@ import org.cryptomator.cryptofs.migration.api.MigrationProgressListener;
 import org.cryptomator.cryptolib.api.InvalidPassphraseException;
 import org.cryptomator.integrations.keychain.KeychainAccessException;
 import org.cryptomator.ui.common.Animations;
-import org.cryptomator.ui.common.ErrorComponent;
 import org.cryptomator.ui.common.FxController;
 import org.cryptomator.ui.common.FxmlFile;
 import org.cryptomator.ui.common.FxmlScene;
 import org.cryptomator.ui.common.Tasks;
 import org.cryptomator.ui.controls.NiceSecurePasswordField;
+import org.cryptomator.ui.fxapp.FxApplicationWindows;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -58,7 +58,7 @@ public class MigrationRunController implements FxController {
 	private final ScheduledExecutorService scheduler;
 	private final KeychainManager keychain;
 	private final ObjectProperty<FileSystemCapabilityChecker.Capability> missingCapability;
-	private final ErrorComponent.Builder errorComponent;
+	private final FxApplicationWindows appWindows;
 	private final Lazy<Scene> startScene;
 	private final Lazy<Scene> successScene;
 	private final Lazy<Scene> impossibleScene;
@@ -73,14 +73,14 @@ public class MigrationRunController implements FxController {
 	public NiceSecurePasswordField passwordField;
 
 	@Inject
-	public MigrationRunController(@MigrationWindow Stage window, @MigrationWindow Vault vault, ExecutorService executor, ScheduledExecutorService scheduler, KeychainManager keychain, @Named("capabilityErrorCause") ObjectProperty<FileSystemCapabilityChecker.Capability> missingCapability, @FxmlScene(FxmlFile.MIGRATION_START) Lazy<Scene> startScene, @FxmlScene(FxmlFile.MIGRATION_SUCCESS) Lazy<Scene> successScene, @FxmlScene(FxmlFile.MIGRATION_CAPABILITY_ERROR) Lazy<Scene> capabilityErrorScene, @FxmlScene(FxmlFile.MIGRATION_IMPOSSIBLE) Lazy<Scene> impossibleScene, ErrorComponent.Builder errorComponent) {
+	public MigrationRunController(@MigrationWindow Stage window, @MigrationWindow Vault vault, ExecutorService executor, ScheduledExecutorService scheduler, KeychainManager keychain, @Named("capabilityErrorCause") ObjectProperty<FileSystemCapabilityChecker.Capability> missingCapability, @FxmlScene(FxmlFile.MIGRATION_START) Lazy<Scene> startScene, @FxmlScene(FxmlFile.MIGRATION_SUCCESS) Lazy<Scene> successScene, @FxmlScene(FxmlFile.MIGRATION_CAPABILITY_ERROR) Lazy<Scene> capabilityErrorScene, @FxmlScene(FxmlFile.MIGRATION_IMPOSSIBLE) Lazy<Scene> impossibleScene, FxApplicationWindows appWindows) {
 		this.window = window;
 		this.vault = vault;
 		this.executor = executor;
 		this.scheduler = scheduler;
 		this.keychain = keychain;
 		this.missingCapability = missingCapability;
-		this.errorComponent = errorComponent;
+		this.appWindows = appWindows;
 		this.startScene = startScene;
 		this.successScene = successScene;
 		this.migrateButtonContentDisplay = Bindings.createObjectBinding(this::getMigrateButtonContentDisplay, vault.stateProperty());
@@ -146,12 +146,12 @@ public class MigrationRunController implements FxController {
 		}).onError(FileNameTooLongException.class, e -> {
 			LOG.error("Migration failed because the underlying file system does not support long filenames.", e);
 			vault.stateProperty().transition(VaultState.Value.PROCESSING, VaultState.Value.NEEDS_MIGRATION);
-			errorComponent.cause(e).window(window).returnToScene(startScene.get()).build().showErrorScene();
+			appWindows.showErrorWindow(e, window, startScene.get());
 			window.setScene(impossibleScene.get());
 		}).onError(Exception.class, e -> { // including RuntimeExceptions
 			LOG.error("Migration failed for technical reasons.", e);
 			vault.stateProperty().transition(VaultState.Value.PROCESSING, VaultState.Value.NEEDS_MIGRATION);
-			errorComponent.cause(e).window(window).returnToScene(startScene.get()).build().showErrorScene();
+			appWindows.showErrorWindow(e, window, startScene.get());
 		}).andFinally(() -> {
 			passwordField.setDisable(false);
 			progressSyncTask.cancel(true);
diff --git a/src/main/java/org/cryptomator/ui/migration/MigrationSuccessController.java b/src/main/java/org/cryptomator/ui/migration/MigrationSuccessController.java
index 1a5de564..fab680ea 100644
--- a/src/main/java/org/cryptomator/ui/migration/MigrationSuccessController.java
+++ b/src/main/java/org/cryptomator/ui/migration/MigrationSuccessController.java
@@ -2,25 +2,24 @@ package org.cryptomator.ui.migration;
 
 import org.cryptomator.common.vaults.Vault;
 import org.cryptomator.ui.common.FxController;
-import org.cryptomator.ui.fxapp.FxApplication;
-import org.cryptomator.ui.mainwindow.MainWindow;
+import org.cryptomator.ui.fxapp.FxApplicationWindows;
+import org.cryptomator.ui.fxapp.PrimaryStage;
 
 import javax.inject.Inject;
 import javafx.fxml.FXML;
 import javafx.stage.Stage;
-import java.util.Optional;
 
 @MigrationScoped
 public class MigrationSuccessController implements FxController {
 
-	private final FxApplication fxApplication;
+	private final FxApplicationWindows appWindows;
 	private final Stage window;
 	private final Vault vault;
 	private final Stage mainWindow;
 
 	@Inject
-	MigrationSuccessController(FxApplication fxApplication, @MigrationWindow Stage window, @MigrationWindow Vault vault, @MainWindow Stage mainWindow) {
-		this.fxApplication = fxApplication;
+	MigrationSuccessController(FxApplicationWindows appWindows, @MigrationWindow Stage window, @MigrationWindow Vault vault, @PrimaryStage Stage mainWindow) {
+		this.appWindows = appWindows;
 		this.window = window;
 		this.vault = vault;
 		this.mainWindow = mainWindow;
@@ -29,7 +28,7 @@ public class MigrationSuccessController implements FxController {
 	@FXML
 	public void unlockAndClose() {
 		close();
-		fxApplication.startUnlockWorkflow(vault, Optional.of(mainWindow));
+		appWindows.startUnlockWorkflow(vault, mainWindow);
 	}
 
 	@FXML
diff --git a/src/main/java/org/cryptomator/ui/preferences/GeneralPreferencesController.java b/src/main/java/org/cryptomator/ui/preferences/GeneralPreferencesController.java
index fafea3f2..7430cf20 100644
--- a/src/main/java/org/cryptomator/ui/preferences/GeneralPreferencesController.java
+++ b/src/main/java/org/cryptomator/ui/preferences/GeneralPreferencesController.java
@@ -7,8 +7,8 @@ import org.cryptomator.common.settings.UiTheme;
 import org.cryptomator.integrations.autostart.AutoStartProvider;
 import org.cryptomator.integrations.autostart.ToggleAutoStartFailedException;
 import org.cryptomator.integrations.keychain.KeychainAccessProvider;
-import org.cryptomator.ui.common.ErrorComponent;
 import org.cryptomator.ui.common.FxController;
+import org.cryptomator.ui.fxapp.FxApplicationWindows;
 import org.cryptomator.ui.traymenu.TrayMenuComponent;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -47,7 +47,7 @@ public class GeneralPreferencesController implements FxController {
 	private final Application application;
 	private final Environment environment;
 	private final Set<KeychainAccessProvider> keychainAccessProviders;
-	private final ErrorComponent.Builder errorComponent;
+	private final FxApplicationWindows appWindows;
 	public ChoiceBox<UiTheme> themeChoiceBox;
 	public ChoiceBox<KeychainAccessProvider> keychainBackendChoiceBox;
 	public CheckBox showMinimizeButtonCheckbox;
@@ -59,9 +59,8 @@ public class GeneralPreferencesController implements FxController {
 	public RadioButton nodeOrientationLtr;
 	public RadioButton nodeOrientationRtl;
 
-
 	@Inject
-	GeneralPreferencesController(@PreferencesWindow Stage window, Settings settings, TrayMenuComponent trayMenu, Optional<AutoStartProvider> autoStartProvider, Set<KeychainAccessProvider> keychainAccessProviders, ObjectProperty<SelectedPreferencesTab> selectedTabProperty, LicenseHolder licenseHolder, ResourceBundle resourceBundle, Application application, Environment environment, ErrorComponent.Builder errorComponent) {
+	GeneralPreferencesController(@PreferencesWindow Stage window, Settings settings, TrayMenuComponent trayMenu, Optional<AutoStartProvider> autoStartProvider, Set<KeychainAccessProvider> keychainAccessProviders, ObjectProperty<SelectedPreferencesTab> selectedTabProperty, LicenseHolder licenseHolder, ResourceBundle resourceBundle, Application application, Environment environment, FxApplicationWindows appWindows) {
 		this.window = window;
 		this.settings = settings;
 		this.trayMenuInitialized = trayMenu.isInitialized();
@@ -73,7 +72,7 @@ public class GeneralPreferencesController implements FxController {
 		this.resourceBundle = resourceBundle;
 		this.application = application;
 		this.environment = environment;
-		this.errorComponent = errorComponent;
+		this.appWindows = appWindows;
 	}
 
 	@FXML
@@ -142,7 +141,7 @@ public class GeneralPreferencesController implements FxController {
 			} catch (ToggleAutoStartFailedException e) {
 				autoStartCheckbox.setSelected(!enableAutoStart); // restore previous state
 				LOG.error("Failed to toggle autostart.", e);
-				errorComponent.cause(e).window(window).returnToScene(window.getScene()).build().showErrorScene();
+				appWindows.showErrorWindow(e, window, window.getScene());
 			}
 		});
 	}
diff --git a/src/main/java/org/cryptomator/ui/recoverykey/RecoveryKeyCreationController.java b/src/main/java/org/cryptomator/ui/recoverykey/RecoveryKeyCreationController.java
index 10479460..87dcbd0e 100644
--- a/src/main/java/org/cryptomator/ui/recoverykey/RecoveryKeyCreationController.java
+++ b/src/main/java/org/cryptomator/ui/recoverykey/RecoveryKeyCreationController.java
@@ -5,11 +5,11 @@ import org.cryptomator.common.vaults.Vault;
 import org.cryptomator.cryptolib.api.CryptoException;
 import org.cryptomator.cryptolib.api.InvalidPassphraseException;
 import org.cryptomator.ui.common.Animations;
-import org.cryptomator.ui.common.ErrorComponent;
 import org.cryptomator.ui.common.FxController;
 import org.cryptomator.ui.common.FxmlFile;
 import org.cryptomator.ui.common.FxmlScene;
 import org.cryptomator.ui.controls.NiceSecurePasswordField;
+import org.cryptomator.ui.fxapp.FxApplicationWindows;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -33,18 +33,18 @@ public class RecoveryKeyCreationController implements FxController {
 	private final ExecutorService executor;
 	private final RecoveryKeyFactory recoveryKeyFactory;
 	private final StringProperty recoveryKeyProperty;
-	private final ErrorComponent.Builder errorComponent;
+	private final FxApplicationWindows appWindows;
 	public NiceSecurePasswordField passwordField;
 
 	@Inject
-	public RecoveryKeyCreationController(@RecoveryKeyWindow Stage window, @FxmlScene(FxmlFile.RECOVERYKEY_SUCCESS) Lazy<Scene> successScene, @RecoveryKeyWindow Vault vault, RecoveryKeyFactory recoveryKeyFactory, ExecutorService executor, @RecoveryKeyWindow StringProperty recoveryKey, ErrorComponent.Builder errorComponent) {
+	public RecoveryKeyCreationController(@RecoveryKeyWindow Stage window, @FxmlScene(FxmlFile.RECOVERYKEY_SUCCESS) Lazy<Scene> successScene, @RecoveryKeyWindow Vault vault, RecoveryKeyFactory recoveryKeyFactory, ExecutorService executor, @RecoveryKeyWindow StringProperty recoveryKey, FxApplicationWindows appWindows) {
 		this.window = window;
 		this.successScene = successScene;
 		this.vault = vault;
 		this.executor = executor;
 		this.recoveryKeyFactory = recoveryKeyFactory;
 		this.recoveryKeyProperty = recoveryKey;
-		this.errorComponent = errorComponent;
+		this.appWindows = appWindows;
 	}
 
 	@FXML
@@ -63,7 +63,7 @@ public class RecoveryKeyCreationController implements FxController {
 				Animations.createShakeWindowAnimation(window).play();
 			} else {
 				LOG.error("Creation of recovery key failed.", task.getException());
-				errorComponent.cause(task.getException()).window(window).returnToScene(window.getScene()).build().showErrorScene();
+				appWindows.showErrorWindow(task.getException(), window, window.getScene());
 			}
 		});
 		executor.submit(task);
diff --git a/src/main/java/org/cryptomator/ui/recoverykey/RecoveryKeyResetPasswordController.java b/src/main/java/org/cryptomator/ui/recoverykey/RecoveryKeyResetPasswordController.java
index 70599128..ca3c4e04 100644
--- a/src/main/java/org/cryptomator/ui/recoverykey/RecoveryKeyResetPasswordController.java
+++ b/src/main/java/org/cryptomator/ui/recoverykey/RecoveryKeyResetPasswordController.java
@@ -2,11 +2,11 @@ package org.cryptomator.ui.recoverykey;
 
 import dagger.Lazy;
 import org.cryptomator.common.vaults.Vault;
-import org.cryptomator.ui.common.ErrorComponent;
 import org.cryptomator.ui.common.FxController;
 import org.cryptomator.ui.common.FxmlFile;
 import org.cryptomator.ui.common.FxmlScene;
 import org.cryptomator.ui.common.NewPasswordController;
+import org.cryptomator.ui.fxapp.FxApplicationWindows;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -31,19 +31,19 @@ public class RecoveryKeyResetPasswordController implements FxController {
 	private final ExecutorService executor;
 	private final StringProperty recoveryKey;
 	private final Lazy<Scene> recoverScene;
-	private final ErrorComponent.Builder errorComponent;
+	private final FxApplicationWindows appWindows;
 
 	public NewPasswordController newPasswordController;
 
 	@Inject
-	public RecoveryKeyResetPasswordController(@RecoveryKeyWindow Stage window, @RecoveryKeyWindow Vault vault, RecoveryKeyFactory recoveryKeyFactory, ExecutorService executor, @RecoveryKeyWindow StringProperty recoveryKey, @FxmlScene(FxmlFile.RECOVERYKEY_RECOVER) Lazy<Scene> recoverScene, ErrorComponent.Builder errorComponent) {
+	public RecoveryKeyResetPasswordController(@RecoveryKeyWindow Stage window, @RecoveryKeyWindow Vault vault, RecoveryKeyFactory recoveryKeyFactory, ExecutorService executor, @RecoveryKeyWindow StringProperty recoveryKey, @FxmlScene(FxmlFile.RECOVERYKEY_RECOVER) Lazy<Scene> recoverScene, FxApplicationWindows appWindows) {
 		this.window = window;
 		this.vault = vault;
 		this.recoveryKeyFactory = recoveryKeyFactory;
 		this.executor = executor;
 		this.recoveryKey = recoveryKey;
 		this.recoverScene = recoverScene;
-		this.errorComponent = errorComponent;
+		this.appWindows = appWindows;
 	}
 
 	@FXML
@@ -64,7 +64,7 @@ public class RecoveryKeyResetPasswordController implements FxController {
 		});
 		task.setOnFailed(event -> {
 			LOG.error("Resetting password failed.", task.getException());
-			errorComponent.cause(task.getException()).window(window).returnToScene(recoverScene.get()).build().showErrorScene();
+			appWindows.showErrorWindow(task.getException(), window, recoverScene.get());
 		});
 		executor.submit(task);
 	}
diff --git a/src/main/java/org/cryptomator/ui/removevault/RemoveVaultModule.java b/src/main/java/org/cryptomator/ui/removevault/RemoveVaultModule.java
index 5915766e..4288e9c7 100644
--- a/src/main/java/org/cryptomator/ui/removevault/RemoveVaultModule.java
+++ b/src/main/java/org/cryptomator/ui/removevault/RemoveVaultModule.java
@@ -5,13 +5,13 @@ import dagger.Module;
 import dagger.Provides;
 import dagger.multibindings.IntoMap;
 import org.cryptomator.ui.common.DefaultSceneFactory;
-import org.cryptomator.ui.common.FxmlLoaderFactory;
 import org.cryptomator.ui.common.FxController;
 import org.cryptomator.ui.common.FxControllerKey;
 import org.cryptomator.ui.common.FxmlFile;
+import org.cryptomator.ui.common.FxmlLoaderFactory;
 import org.cryptomator.ui.common.FxmlScene;
 import org.cryptomator.ui.common.StageFactory;
-import org.cryptomator.ui.mainwindow.MainWindow;
+import org.cryptomator.ui.fxapp.PrimaryStage;
 
 import javax.inject.Provider;
 import javafx.scene.Scene;
@@ -33,12 +33,12 @@ abstract class RemoveVaultModule {
 	@Provides
 	@RemoveVaultWindow
 	@RemoveVaultScoped
-	static Stage provideStage(StageFactory factory, @MainWindow Stage owner, ResourceBundle resourceBundle) {
+	static Stage provideStage(StageFactory factory, @PrimaryStage Stage primaryStage, ResourceBundle resourceBundle) {
 		Stage stage = factory.create();
 		stage.setTitle(resourceBundle.getString("removeVault.title"));
 		stage.setResizable(false);
 		stage.initModality(Modality.WINDOW_MODAL);
-		stage.initOwner(owner);
+		stage.initOwner(primaryStage);
 		return stage;
 	}
 
diff --git a/src/main/java/org/cryptomator/ui/traymenu/TrayMenuController.java b/src/main/java/org/cryptomator/ui/traymenu/TrayMenuController.java
index dd08d5dc..32f6cbc5 100644
--- a/src/main/java/org/cryptomator/ui/traymenu/TrayMenuController.java
+++ b/src/main/java/org/cryptomator/ui/traymenu/TrayMenuController.java
@@ -1,9 +1,9 @@
 package org.cryptomator.ui.traymenu;
 
 import org.cryptomator.common.vaults.Vault;
-import org.cryptomator.ui.fxapp.FxApplication;
-import org.cryptomator.ui.launcher.AppLifecycleListener;
-import org.cryptomator.ui.launcher.FxApplicationStarter;
+import org.cryptomator.ui.common.VaultService;
+import org.cryptomator.ui.fxapp.FxApplicationTerminator;
+import org.cryptomator.ui.fxapp.FxApplicationWindows;
 import org.cryptomator.ui.preferences.SelectedPreferencesTab;
 
 import javax.inject.Inject;
@@ -16,7 +16,6 @@ import java.awt.PopupMenu;
 import java.awt.event.ActionEvent;
 import java.awt.event.ActionListener;
 import java.util.EventObject;
-import java.util.Optional;
 import java.util.ResourceBundle;
 import java.util.function.Consumer;
 
@@ -24,16 +23,18 @@ import java.util.function.Consumer;
 class TrayMenuController {
 
 	private final ResourceBundle resourceBundle;
-	private final AppLifecycleListener appLifecycle;
-	private final FxApplicationStarter fxApplicationStarter;
+	private final VaultService vaultService;
+	private final FxApplicationWindows appWindows;
+	private final FxApplicationTerminator appTerminator;
 	private final ObservableList<Vault> vaults;
 	private final PopupMenu menu;
 
 	@Inject
-	TrayMenuController(ResourceBundle resourceBundle, AppLifecycleListener appLifecycle, FxApplicationStarter fxApplicationStarter, ObservableList<Vault> vaults) {
+	TrayMenuController(ResourceBundle resourceBundle, VaultService vaultService, FxApplicationWindows appWindows, FxApplicationTerminator appTerminator, ObservableList<Vault> vaults) {
 		this.resourceBundle = resourceBundle;
-		this.appLifecycle = appLifecycle;
-		this.fxApplicationStarter = fxApplicationStarter;
+		this.vaultService = vaultService;
+		this.appWindows = appWindows;
+		this.appTerminator = appTerminator;
 		this.vaults = vaults;
 		this.menu = new PopupMenu();
 	}
@@ -110,35 +111,31 @@ class TrayMenuController {
 	}
 
 	private void quitApplication(EventObject actionEvent) {
-		appLifecycle.quit();
+		appTerminator.terminate();
 	}
 
 	private void unlockVault(Vault vault) {
-		showMainAppAndThen(app -> app.startUnlockWorkflow(vault, Optional.empty()));
+		appWindows.startUnlockWorkflow(vault, null);
 	}
 
 	private void lockVault(Vault vault) {
-		showMainAppAndThen(app -> app.startLockWorkflow(vault, Optional.empty()));
+		appWindows.startLockWorkflow(vault, null);
 	}
 
 	private void lockAllVaults(ActionEvent actionEvent) {
-		showMainAppAndThen(app -> app.getVaultService().lockAll(vaults.filtered(Vault::isUnlocked), false));
+		vaultService.lockAll(vaults.filtered(Vault::isUnlocked), false);
 	}
 
 	private void revealVault(Vault vault) {
-		showMainAppAndThen(app -> app.getVaultService().reveal(vault));
+		vaultService.reveal(vault);
 	}
 
 	void showMainWindow(@SuppressWarnings("unused") ActionEvent actionEvent) {
-		showMainAppAndThen(app -> app.showMainWindow());
+		appWindows.showMainWindow();
 	}
 
 	private void showPreferencesWindow(@SuppressWarnings("unused") EventObject actionEvent) {
-		showMainAppAndThen(app -> app.showPreferencesWindow(SelectedPreferencesTab.ANY));
-	}
-
-	private void showMainAppAndThen(Consumer<FxApplication> action) {
-		fxApplicationStarter.get().thenAccept(action);
+		appWindows.showPreferencesWindow(SelectedPreferencesTab.ANY);
 	}
 
 }
diff --git a/src/main/java/org/cryptomator/ui/unlock/UnlockComponent.java b/src/main/java/org/cryptomator/ui/unlock/UnlockComponent.java
index 9c0338c5..67e90520 100644
--- a/src/main/java/org/cryptomator/ui/unlock/UnlockComponent.java
+++ b/src/main/java/org/cryptomator/ui/unlock/UnlockComponent.java
@@ -7,11 +7,11 @@ package org.cryptomator.ui.unlock;
 
 import dagger.BindsInstance;
 import dagger.Subcomponent;
+import org.cryptomator.common.Nullable;
 import org.cryptomator.common.vaults.Vault;
 
 import javax.inject.Named;
 import javafx.stage.Stage;
-import java.util.Optional;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Future;
 
@@ -29,16 +29,9 @@ public interface UnlockComponent {
 		return workflow;
 	}
 
-	@Subcomponent.Builder
-	interface Builder {
-
-		@BindsInstance
-		Builder vault(@UnlockWindow Vault vault);
-
-		@BindsInstance
-		Builder owner(@Named("unlockWindowOwner") Optional<Stage> owner);
-
-		UnlockComponent build();
+	@Subcomponent.Factory
+	interface Factory {
+		UnlockComponent create(@BindsInstance @UnlockWindow Vault vault, @BindsInstance @Named("unlockWindowOwner") @Nullable Stage owner);
 	}
 
 }
diff --git a/src/main/java/org/cryptomator/ui/unlock/UnlockModule.java b/src/main/java/org/cryptomator/ui/unlock/UnlockModule.java
index 3c1267e6..348d3483 100644
--- a/src/main/java/org/cryptomator/ui/unlock/UnlockModule.java
+++ b/src/main/java/org/cryptomator/ui/unlock/UnlockModule.java
@@ -14,6 +14,7 @@ import org.cryptomator.ui.common.FxmlScene;
 import org.cryptomator.ui.common.StageFactory;
 import org.cryptomator.ui.keyloading.KeyLoadingComponent;
 import org.cryptomator.ui.keyloading.KeyLoadingStrategy;
+import org.jetbrains.annotations.Nullable;
 
 import javax.inject.Named;
 import javax.inject.Provider;
@@ -37,12 +38,12 @@ abstract class UnlockModule {
 	@Provides
 	@UnlockWindow
 	@UnlockScoped
-	static Stage provideStage(StageFactory factory, @UnlockWindow Vault vault, @Named("unlockWindowOwner") Optional<Stage> owner) {
+	static Stage provideStage(StageFactory factory, @UnlockWindow Vault vault, @Nullable @Named("unlockWindowOwner") Stage owner) {
 		Stage stage = factory.create();
 		stage.setTitle(vault.getDisplayName());
 		stage.setResizable(false);
-		if (owner.isPresent()) {
-			stage.initOwner(owner.get());
+		if (owner != null) {
+			stage.initOwner(owner);
 			stage.initModality(Modality.WINDOW_MODAL);
 		} else {
 			stage.initModality(Modality.APPLICATION_MODAL);
diff --git a/src/main/java/org/cryptomator/ui/unlock/UnlockWorkflow.java b/src/main/java/org/cryptomator/ui/unlock/UnlockWorkflow.java
index 6964c3c8..45b9bf00 100644
--- a/src/main/java/org/cryptomator/ui/unlock/UnlockWorkflow.java
+++ b/src/main/java/org/cryptomator/ui/unlock/UnlockWorkflow.java
@@ -9,10 +9,10 @@ import org.cryptomator.common.vaults.Vault;
 import org.cryptomator.common.vaults.VaultState;
 import org.cryptomator.common.vaults.Volume.VolumeException;
 import org.cryptomator.cryptolib.api.CryptoException;
-import org.cryptomator.ui.common.ErrorComponent;
 import org.cryptomator.ui.common.FxmlFile;
 import org.cryptomator.ui.common.FxmlScene;
 import org.cryptomator.ui.common.VaultService;
+import org.cryptomator.ui.fxapp.FxApplicationWindows;
 import org.cryptomator.ui.keyloading.KeyLoadingStrategy;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -42,17 +42,17 @@ public class UnlockWorkflow extends Task<Boolean> {
 	private final VaultService vaultService;
 	private final Lazy<Scene> successScene;
 	private final Lazy<Scene> invalidMountPointScene;
-	private final ErrorComponent.Builder errorComponent;
+	private final FxApplicationWindows appWindows;
 	private final KeyLoadingStrategy keyLoadingStrategy;
 
 	@Inject
-	UnlockWorkflow(@UnlockWindow Stage window, @UnlockWindow Vault vault, VaultService vaultService, @FxmlScene(FxmlFile.UNLOCK_SUCCESS) Lazy<Scene> successScene, @FxmlScene(FxmlFile.UNLOCK_INVALID_MOUNT_POINT) Lazy<Scene> invalidMountPointScene, ErrorComponent.Builder errorComponent, @UnlockWindow KeyLoadingStrategy keyLoadingStrategy) {
+	UnlockWorkflow(@UnlockWindow Stage window, @UnlockWindow Vault vault, VaultService vaultService, @FxmlScene(FxmlFile.UNLOCK_SUCCESS) Lazy<Scene> successScene, @FxmlScene(FxmlFile.UNLOCK_INVALID_MOUNT_POINT) Lazy<Scene> invalidMountPointScene, FxApplicationWindows appWindows, @UnlockWindow KeyLoadingStrategy keyLoadingStrategy) {
 		this.window = window;
 		this.vault = vault;
 		this.vaultService = vaultService;
 		this.successScene = successScene;
 		this.invalidMountPointScene = invalidMountPointScene;
-		this.errorComponent = errorComponent;
+		this.appWindows = appWindows;
 		this.keyLoadingStrategy = keyLoadingStrategy;
 	}
 
@@ -118,7 +118,7 @@ public class UnlockWorkflow extends Task<Boolean> {
 
 	private void handleGenericError(Throwable e) {
 		LOG.error("Unlock failed for technical reasons.", e);
-		errorComponent.cause(e).window(window).build().showErrorScene();
+		appWindows.showErrorWindow(e, window, null);
 	}
 
 	@Override
diff --git a/src/main/java/org/cryptomator/ui/vaultoptions/VaultOptionsModule.java b/src/main/java/org/cryptomator/ui/vaultoptions/VaultOptionsModule.java
index cb6c109b..e6966da6 100644
--- a/src/main/java/org/cryptomator/ui/vaultoptions/VaultOptionsModule.java
+++ b/src/main/java/org/cryptomator/ui/vaultoptions/VaultOptionsModule.java
@@ -13,7 +13,7 @@ import org.cryptomator.ui.common.FxmlFile;
 import org.cryptomator.ui.common.FxmlLoaderFactory;
 import org.cryptomator.ui.common.FxmlScene;
 import org.cryptomator.ui.common.StageFactory;
-import org.cryptomator.ui.mainwindow.MainWindow;
+import org.cryptomator.ui.fxapp.PrimaryStage;
 import org.cryptomator.ui.recoverykey.RecoveryKeyComponent;
 
 import javax.inject.Provider;
@@ -44,14 +44,14 @@ abstract class VaultOptionsModule {
 	@Provides
 	@VaultOptionsWindow
 	@VaultOptionsScoped
-	static Stage provideStage(StageFactory factory, @MainWindow Stage owner, @VaultOptionsWindow Vault vault) {
+	static Stage provideStage(StageFactory factory, @PrimaryStage Stage primaryStage, @VaultOptionsWindow Vault vault) {
 		Stage stage = factory.create();
 		stage.setTitle(vault.getDisplayName());
 		stage.setResizable(true);
 		stage.setMinWidth(400);
 		stage.setMinHeight(300);
 		stage.initModality(Modality.WINDOW_MODAL);
-		stage.initOwner(owner);
+		stage.initOwner(primaryStage);
 		return stage;
 	}
 
diff --git a/src/main/java/org/cryptomator/ui/wrongfilealert/WrongFileAlertModule.java b/src/main/java/org/cryptomator/ui/wrongfilealert/WrongFileAlertModule.java
index 7600146e..19dd486f 100644
--- a/src/main/java/org/cryptomator/ui/wrongfilealert/WrongFileAlertModule.java
+++ b/src/main/java/org/cryptomator/ui/wrongfilealert/WrongFileAlertModule.java
@@ -5,13 +5,13 @@ import dagger.Module;
 import dagger.Provides;
 import dagger.multibindings.IntoMap;
 import org.cryptomator.ui.common.DefaultSceneFactory;
-import org.cryptomator.ui.common.FxmlLoaderFactory;
 import org.cryptomator.ui.common.FxController;
 import org.cryptomator.ui.common.FxControllerKey;
 import org.cryptomator.ui.common.FxmlFile;
+import org.cryptomator.ui.common.FxmlLoaderFactory;
 import org.cryptomator.ui.common.FxmlScene;
 import org.cryptomator.ui.common.StageFactory;
-import org.cryptomator.ui.mainwindow.MainWindow;
+import org.cryptomator.ui.fxapp.PrimaryStage;
 
 import javax.inject.Provider;
 import javafx.scene.Scene;
@@ -33,11 +33,11 @@ abstract class WrongFileAlertModule {
 	@Provides
 	@WrongFileAlertWindow
 	@WrongFileAlertScoped
-	static Stage provideStage(StageFactory factory, @MainWindow Stage mainWindow, ResourceBundle resourceBundle) {
+	static Stage provideStage(StageFactory factory, @PrimaryStage Stage primaryStage, ResourceBundle resourceBundle) {
 		Stage stage = factory.create();
 		stage.setTitle(resourceBundle.getString("wrongFileAlert.title"));
 		stage.setResizable(false);
-		stage.initOwner(mainWindow);
+		stage.initOwner(primaryStage);
 		stage.initModality(Modality.WINDOW_MODAL);
 		return stage;
 	}
diff --git a/src/test/java/org/cryptomator/launcher/FileOpenRequestHandlerTest.java b/src/test/java/org/cryptomator/launcher/FileOpenRequestHandlerTest.java
index e249e641..bb9cabbf 100644
--- a/src/test/java/org/cryptomator/launcher/FileOpenRequestHandlerTest.java
+++ b/src/test/java/org/cryptomator/launcher/FileOpenRequestHandlerTest.java
@@ -5,7 +5,6 @@
  *******************************************************************************/
 package org.cryptomator.launcher;
 
-import org.cryptomator.ui.launcher.AppLaunchEvent;
 import org.hamcrest.CoreMatchers;
 import org.hamcrest.MatcherAssert;
 import org.junit.jupiter.api.Assertions;
@@ -43,7 +42,7 @@ public class FileOpenRequestHandlerTest {
 
 		AppLaunchEvent evt = queue.poll();
 		Assertions.assertNotNull(evt);
-		Collection<Path> paths = evt.getPathsToOpen();
+		Collection<Path> paths = evt.pathsToOpen();
 		MatcherAssert.assertThat(paths, CoreMatchers.hasItems(Paths.get("foo"), Paths.get("bar")));
 	}
 
-- 
2.35.1

